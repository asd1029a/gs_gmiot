'use strict'document.addEventListener("DOMContentLoaded",function () {    const lnb = document.querySelector(".lnb .listScroll ul li");    //lnb 리스트 클릭 이벤트    lnb.addEventListener("click", function(e) {        //missionDetail(e.currentTarget);    });    // missionLayer 생성    mapManager.createVectorLayer("missionLayer",null,new ol.source.Vector({}));    mission.init();    takeOff.init();    takeOff.initEvent();    waypoint.init();    waypoint.initEvent();    roi.init();    roi.initEvent();    returnHome.init();    returnHome.initEvent();    editLock.init();    editLock.initEvent();});const createMisnRouteDetail = function() {    // 상단부분 고정 total cnt 만 변경    const missionRoute = common.crtEl("article");    missionRoute.className = "missionRoute";    const titleDl = common.crtEl("dl");    title.className = "title";    const titleDt = common.crtEl("dt");    const titleDtI = common.crtEl("i");    const titleDtImg = common.crtEl("img");    titleDtImg.src = "images/default/arrowBottom.svg";    titleDtI.append(titleDtImg);    titleDt.append(titleDtI);    const titleDd = common.crtEl("dd");    const titleDdSpan = common.crtEl("span");    titleDd.createTextNode("Total");    titleDdSpan.createTextNode("555");    titleDd.append(titleDdSpan);    titleDl.append(titleDt,titleDd);    missionRoute.appendChild(titleDl);    const missionStart = common.crtEl("p");    missionStart.className = "missionStart";    const missionStartI = common.crtEl("i");    const missionStartImg = common.crtEl("img");    missionStartImg.src = "images/default/arrowBottom.svg";    missionStartI.append(missionStartImg);    missionStart.append(missionStartI);    // 내용 부분    const routeContents = common.crtEl("div");}const missionDetail = async function() {    missionDetail.prototype.missionList = await axios.post("/drone/api/getTestData", {        "url":"data/missionList.json"    })    const testData = await axios.post("/drone/api/getTestData",{        "url":"data/mission.json"    })    let key = Object.keys(testData.data);    const dataArr = testData.data[key];    for(let i of dataArr) {        if(i.name =="takeOff") {            createTakeOff(i,this.missionList.data);        }        else if(i.name == "waypoint") {            createwayPoint(i,this.missionList.data)        }    }}const createPopup= {    createTitle: (index , name) => {        const routeDl = common.crtEl("dl");        routeDl.className = "routeTitle";        // routeTitle dt        const dtSpan = common.crtEl("span")        const routeDt = common.crtEl("dt");        dtSpan.className = "num";        dtSpan.innerText=index;        let selectBox= createPopup.createSelectBox(index,name, mission.list);        routeDt.append(dtSpan, selectBox);        // routeTitle dd        const routeDd= common.crtEl("dd");        const deleteSpan= common.crtEl("span");        deleteSpan.className= "button";        deleteSpan.innerText= "삭제";        const deleteI= common.crtEl("i");        deleteI.id = "display_btn";        deleteI.className = "displayBtn";        deleteI.addEventListener("click", function(e) {            let routeToggle = this.closest(".routeTitle").nextSibling;            routeToggle.classList.toggle("on");            if(routeToggle.classList.contains("on")) {                routeToggle.style.display= "block";            } else {                routeToggle.style.display= "none";            }        });        const deleteImg= common.crtEl("img");        deleteImg.src="images/default/arrowBottom.svg";        deleteI.append(deleteImg);        routeDd.append(deleteSpan, deleteI);        routeDl.append(routeDt,routeDd);        return routeDl;    },    createToggle: (index,name, data) => {        /*const mission= common.postAxios(await axios.post("/drone/api/getTestData", {            "url":"data/mission.json"        }));*/        const routeToggle= common.crtEl("div");        routeToggle.className="routeToggle";        const coordinateUl= common.crtEl("ul");        coordinateUl.className="coordinate";        let missionName;        if(name == "waypoint") {            missionName = mission.param1;        } else if(name == "loi") {            missionName = mission.param2;        } else if(name == "roi" || name == "takeOff") {            missionName = mission.param3;        } else {            return false;        }        missionName.map((data) => {            const li = common.crtEl("li");            const labelSpan = common.crtEl("span");            labelSpan.innerText = data.name;            const contextSpan = common.crtEl("span");            const input = common.crtEl("input");            input.type = "text";            input.placeholder = "0.0000";            input.id = `${data.id}`            contextSpan.append(input, data.unit);            li.append(labelSpan, contextSpan);            coordinateUl.append(li);        });        routeToggle.append(coordinateUl);        return routeToggle;    },    createSelectBox: (index,name, missionList) => {        const selectBoxDiv= common.crtEl("div");        selectBoxDiv.className="selectBox";        selectBoxDiv.classList.add(`type${index}`);        const divBox= common.crtEl("div");        divBox.className="box";        const selectDiv= common.crtEl("div");        selectDiv.className="select";        selectDiv.innerText= name;        const ulList= common.crtEl("ul");        ulList.className= "list";        ulList.style.display="none";        missionList.map((val) => {            const li= common.crtEl("li");            li.innerText= val.name;            if(val.name == name) {                li.className= "selected";            }            li.addEventListener("click", function(e) {                let parent= this.parentElement;                common.arr.call(parent.children).map((data) => {                    return data.classList.remove("selected")                });                parent.style.display="none";                parent.classList.remove("on");                this.className = "selected"                selectDiv.innerText= this.textContent;            });            return ulList.append(li);        });        divBox.append(selectDiv, ulList);        selectBoxDiv.append(divBox);        let checked = false;        selectBoxDiv.addEventListener("click", function(e) {            if(checked) {                this.classList.remove("on");                checked= false;            } else {                this.classList.add("on");                checked= true;            }            if(this.classList.contains("on")) {                this.children[0].children[1].style.display="block";            } else {                this.children[0].children[1].style.display="none";            }        });        return selectBoxDiv;    },    getPopupElement: function(seq) {        const routeContents = common.getQs(".routeContents");        routeContents.addEventListener("click", function(e) {            mission.getObjByNum("type", "marker", "missionNo", seq);        });        return routeContents;    },    detailPopup: function(data) {    },    setXY: function(seq, coordinates) {        //const routeSet = common.getQs(`#routeSet${seq}`);        let routeSetArr = common.arr.call(common.getQsAll(`.routeSet`));        let routeSet = routeSetArr.find((data) => {            if(Number.parseInt(data.dataset.seq) === seq ) {                return data;            }        });        const mapX = routeSet.querySelector(`#mapX`);        const mapY = routeSet.querySelector(`#mapY`);        const routeToggleAll = common.getQsAll(".routeToggle");        mapX.value = coordinates[0];        mapY.value = coordinates[1];        common.arr.call(routeToggleAll).map((data) => {                return data.style.display = "none";        });        routeSet.scrollIntoView();    },    getRouteSet: function(seq) {        const routeSet= common.crtEl("div");        routeSet.className = "routeSet";        routeSet.dataset.seq = seq;        return routeSet;    },    removePopup: function(seq,el) {        const num = common.getQsAll(".num");        const routeSet = common.arr.call(common.getQsAll(".routeSet"));        common.arr.call(num).map((data) => {            let textNumber = Number.parseInt(data.textContent);            if(textNumber > seq + 1) {                textNumber -= 1            }            return data.textContent = textNumber;        });        routeSet.map((data) => {            let datasetSeq = Number.parseInt(data.dataset.seq);            if(datasetSeq > seq) {                datasetSeq -= 1;            }            retru        });        common.getQs(".routeContents").removeChild(el);    },    init: () => {    },    initEvent: () => {    },}// 미션const mission = {    list: [        {id:"waypoint", name:"경유지"},        {id:"loi", name:"LOI"},        {id:"roi", name:"ROI"},        {id:"return", name:"귀환"},    ],    param1: [{name:"위도",unit:"m", id: "mapX"}, {name:"경도",unit:"m", id: "mapY"}, {name:"고도",unit:"m", id: "maxZ" }, {name:"정지",unit:"초", id: "time" }, {name:"속도",unit:"km", id: "speed" }, {name:"YAW",unit:"Deg", id: "yaw" }],    param2: [{name:"위도",unit:"m", id: "mapX"}, {name:"경도",unit:"m", id: "mapY"}, {name:"고도",unit:"m", id: "maxZ" }, {name:"정지",unit:"초", id: "time" }, {name:"속도",unit:"km", id: "speed" }, {name:"YAW",unit:"Deg", id: "yaw" }],    param3: [{name:"위도",unit:"m", id: "mapX"}, {name:"경도",unit:"m", id: "mapY"}, {name:"고도",unit:"m", id: "maxZ" }],    map: null,    layer: null,    translate: null,    editBtnEl: null,    setFeature: (featureType,style) => {        // feature 생성 feature 타입 input        let feature = new ol.Feature();        feature.setGeometry(featureType);        feature.setStyle(style);        let source = mission.layer.getSource();        source.addFeature(feature);        source.addFeatures(feature);        return feature;    },getTranslate: (feature) => {        let translate = new ol.interaction.Translate({            features: new ol.Collection([feature])        });1        mission.translate = translate;        return mission.translate;    },    setTranslateCollectionEvent: (name,listener) => {        mission.translate.on(name,listener);    },getObjByNum: (key, val, numberInfo, number) => {        let featureList= mission.layer.getSource().getFeatures();        return featureList.find((data) => {            if(data.get(key) == val) {                if(data.get(numberInfo) == undefined) {                    return null;                } else if(data.get(numberInfo) == number){                    return data;                }            }        })    },getObjCnt: (type, val) => {        let featureList= mission.layer.getSource().getFeatures();        return featureList.filter((data) => {            return (data.get(type) == val);        }).length;    },getObjList: (type, val) => {        let featureList= mission.layer.getSource().getFeatures();        return featureList.filter((data) => {            return (data.get(type) == val);        });    }, getObjMax: (type, val) => {        let featureList= mission.getObjList(type, val).map((data) => {            return data.get("seq");        });        return Math.max(...featureList);    }, checkInteraction: (type) => {        let checkInteraction = mapManager.map.getInteractions().getArray();        return checkInteraction.find((data) => {            if(data.get("type") == type) {                mapManager.map.removeInteraction(data);            }        })    },removeFeature: (feature) => {        mission.layer.getSource().removeFeature(feature);    },btnActiveSet: (el) => {        //edit click remove listener        mission.editBtnEl.map((data) => {            if(data.getAttribute("id") != el.getAttribute("id")) {                if(data.getAttribute("class") == "active") {                    let event= new MouseEvent("click", {});                    data.dispatchEvent(event);                }            };            return mission.editBtnEl;        });        //이거 삭제해야함 ★★★★★★★    },removeMission: (seq, name, el) => {        // popup 관련 삭제        // 맵 marker 삭제        if(name == "waypoint") {            let feature= mission.getObjByNum("name",name ,"missionNo", seq);            let lineSeq= feature.get("seq");            let lineObj= mission.getObjByNum("name", "line", "seq", lineSeq);            let nextLineObj= mission.getObjByNum("name", "line", "seq", lineSeq+1);            mission.removeFeature(feature);            let prevObj= mission.getObjByNum("name",name ,"missionNo", seq -1);            let nextObj= mission.getObjByNum("name",name ,"missionNo", seq +1);            let prevCoordi= prevObj.getGeometry().getCenter();            let nextObjCoordi= nextObj.getGeometry().getCenter();            nextLineObj.getGeometry().setCoordinates([prevCoordi, nextObjCoordi]);            mission.removeFeature(lineObj);            let lineList= mission.getObjList("name", "line");            lineList.map((data) => {                let no= data.get("seq");                if(no > lineSeq) {                    data.set("seq", no - 1);                }                return data;            });            // waypoint seq 최신화            let waypointList= mission.getObjList("name", "waypoint");            waypointList.map((data) => {                let no= data.get("seq");                if(no > lineSeq) {                    data.set("seq", no - 1);                }                return data//.setStyle(mission.waypointStyle(Number.parseInt(data.getStyle().getText().getText()) + 1));;            });        } else if(name == "roi") {            let feature= mission.getObjByNum("name",name ,"missionNo", seq);            mission.removeFeature(feature);            let missionList= mission.getObjList("type", "marker");            missionList.map((data)=> {                let no = data.get("missionNo")                if(no > seq) {                    data.set("missionNo", no - 1);                }                return data;            });        } else if(name == "return") {        }    },    init: () => {        mission.layer = mapManager.getVectorLayer("missionLayer");        mission.editBtnEl= common.arr.call(common.getQs(".missionEdit ul").children);        mission.initEvent();    },initEvent: () => {    }}const editLock = Object.create(mission);    editLock.elements = common.arr.call(common.getQs(".missionEdit ul").children);    editLock.init=() => {        editLock.editActive("disabled");    };    editLock.initEvent= () => {        let editLockBtn= common.getQs("#edit_lock_btn");        editLockBtn.addEventListener("click", function() {            if(editLockBtn.getAttribute("class")== "on") {                editLockBtn.setAttribute("class", "off");                editLock.editActive("disabled");            } else {                editLockBtn.setAttribute("class", "on");                editLock.editActive("");            }        });    };    editLock.editActive=(state) => {        editLock.elements.map((el) => {            if(el.id!= "edit_lock_btn") {                el.setAttribute("class", state);            }        })    };const takeOff = Object.create(mission);    //takeOff.    //properties    takeOff.firstLine= null;    takeOff.firstCoordi= null;    takeOff.firstPlusFeature= null;    takeOff.check=0;    takeOff.init = () => {    };    takeOff.initEvent= () => {        let takeOffBtn= common.getQs("#take_off_btn");        takeOffBtn.addEventListener("click",function(e) {            mapManager.setMapEventListener("click", takeOff.mapClickListener);            takeOff.mapPointermoveEvent();            takeOff.createTakeOff();            takeOff.createPopup();        });    };    takeOff.mapClickListener= (e) => {        mapManager.map.forEachFeatureAtPixel(e.pixel, function(f) {            let feature = f;            //lineString 과 take off 제외            if(feature.get("name") != "takeOff") {                return false;            }            takeOff.checkInteraction("translate");            if(mission.getObjList("type","plus").length != 0) {                let firstPlusFeature= takeOff.getObjList("type","plus")[0];                mission.removeFeature(firstPlusFeature);            }            let translate = takeOff.getTranslate(feature);            takeOff.setTranslateCollectionEvent("translatestart",takeOff.translatestart);            takeOff.setTranslateCollectionEvent("translating",takeOff.translating);            takeOff.setTranslateCollectionEvent("translateend",takeOff.translateend);            mapManager.map.addInteraction(translate);        });    };    takeOff.mapPointermoveEvent= () => {        mapManager.setMapEventListener("pointermove",function(evt) {            let markerChk = takeOff.getObjCnt("name","takeOff")  == 0;            let hit = mapManager.map.hasFeatureAtPixel(mapManager.map.getEventPixel(evt.originalEvent));            evt.target.getTargetElement().style.cursor = markerChk ?                'pointer' :                    hit ? 'pointer' : '';        });    };    takeOff.createTakeOff= () => {        takeOff.check = mapManager.getVectorLayer("missionLayer").getSource().getFeatures().length;        if(takeOff.check) {            return;        }        let featureType= new ol.geom.Circle({});        let coordinate = mapManager.map.getView().getCenter();        featureType.setCenterAndRadius(coordinate, 100)        let style = new ol.style.Style({            fill: new ol.style.Fill({                color: 'green'            }),            stroke: new ol.style.Stroke({                color: 'green',                width: 2            }),            text: new ol.style.Text({                font: 'bold 10px serif',                text: "1",                fill: new ol.style.Fill({                    color: 'white'                }),            }),            zIndex: 100,        })        let takeOffFeature = takeOff.setFeature(featureType,style);        takeOffFeature.set("seq", takeOff.getObjCnt("type","marker"));        takeOffFeature.set("type", "marker");        takeOffFeature.set("name","takeOff");        takeOffFeature.set("missionNo", 0);    };    takeOff.createPopup = (e)=> {        if(takeOff.check) {            return;        };        let seq = 0;        let obj= takeOff.getObjList("name", "takeOff")[0].getGeometry().getCenter();        let objCoordi= ol.proj.transform([obj[0], obj[1]], 'EPSG:5181','EPSG:4326');        let routeTitle= createPopup.createTitle(1, "takeOff");        let routeToggle= createPopup.createToggle(0,"takeOff");        let routeSet = createPopup.getRouteSet(seq);        routeSet.append(routeTitle, routeToggle);        let popup= createPopup.getPopupElement(seq);        popup.append(routeSet);        createPopup.setXY(seq, objCoordi);    };    takeOff.translatestart= (e) => {        if(takeOff.getObjCnt("name","line")== 0) {            return false;        }        // 변경할 라인 객체 선택( 첫번째 라인)        takeOff.firstLine= takeOff.getObjByNum("name","line", "seq", 1);        // 고정할 라인 위도경도 선택 (두번째 마커)        takeOff.firstCoordi= takeOff.getObjByNum("name","waypoint", "seq",1).getGeometry().getCenter();    };    takeOff.translating= (e) => {        if(takeOff.firstLine != null) {            takeOff.firstLine.getGeometry().setCoordinates([takeOff.firstCoordi, e.coordinate]);        }        if(takeOff.getObjList("type", "return")[0] != undefined) {            let line= takeOff.getObjList("type", "return")[0];            let max= takeOff.getObjMax("name", "waypoint");            let lastObj= takeOff.getObjByNum("name", "waypoint", "seq",max);            line.getGeometry().setCoordinates([lastObj.getGeometry().getCenter(),e.coordinate]);        }    };    takeOff.translateend= (e) => {        mapManager.map.removeInteraction(takeOff.translate);    };const waypoint = Object.create(mission);    waypoint.prevMarkerObj= null;    waypoint.nextMarkerObj= null;    waypoint.prevLineObj= null;    waypoint.nextLineObj= null;    waypoint.prevPlusObj= null;    waypoint.plusMarker= null;    waypoint.clickMarker= false;    waypoint.init = () => {        /*if(data != null) {            waypoint.createWaypoint(data);        }*/    };    waypoint.initEvent = () => {        let waypointBtn = common.getQs("#waypoint_btn");        waypointBtn.addEventListener("click",function(e) {            //이동 및 수정은 언제나 활성화            mapManager.setMapEventListener("click",waypoint.mapClickListener);            // 실행되어져있는 listener 삭제            waypoint.btnActiveSet(waypointBtn);            // passive            if(waypointBtn.getAttribute("class")== "active") {                waypointBtn.setAttribute("class", "");                mapManager.removeMapEventListener("click", waypoint.createWaypoint);            // active            } else {                waypointBtn.setAttribute("class", "active");                mapManager.setMapEventListener("click", waypoint.createWaypoint);            }        });    };    waypoint.mapClickListener= (e) => {        mapManager.map.forEachFeatureAtPixel(e.pixel, function(f) {            let feature = f;            if(feature.get("name") == "plusToWaypoint") {                waypoint.plusToWaypoint(feature);            }            if(feature.get("name") == "waypoint") {                waypoint.checkInteraction("translate");                let translate = waypoint.getTranslate(feature);                let seq = feature.get("seq");                let prevLineObj = waypoint.getObjByNum("name","line", "seq",seq);                waypoint.createPlus(prevLineObj.getGeometry().getFlatMidpoint(),seq);                waypoint.setTranslateCollectionEvent("translatestart",waypoint.translatestart);                waypoint.setTranslateCollectionEvent("translating",waypoint.translating);                waypoint.setTranslateCollectionEvent("translateend",waypoint.translateend);                translate.set("type","translate");                mapManager.map.addInteraction(translate);            }        });    }    //line, waypoint, midpoint 지정    waypoint.createWaypoint= (e) => {        //not click        if(e.originalEvent != undefined) {            // pixel has feature => true ? return false : return true; //            if(mapManager.map.hasFeatureAtPixel(mapManager.map.getEventPixel(e.originalEvent))) return false;        }        if(waypoint.getObjCnt("type", "return") == 1) {            waypoint.removeFeature(waypoint.getObjList("type", "return")[0]);        }        let lineType = new ol.geom.LineString([0,0]);        let waypointType = new ol.geom.Circle({});        let seq = waypoint.getObjCnt("name","waypoint") + 1;        let markerText = waypoint.getObjCnt("type","marker");        let prev;        let lastSeq= 1;        let waypointList = waypoint.getObjList("name","waypoint").map((data) => {            return data.get("seq");        });        prev= waypoint.getObjByNum("name", "takeOff", "seq",0);        if(waypointList.length != 0) {            lastSeq = Math.max(...waypointList);            prev = waypoint.getObjByNum("name", "waypoint", "seq",lastSeq);        }        let startCoordinates = prev.getGeometry().getCenter();        let endCoordinates = e.coordinate;        let lineStyle = waypoint.lineStyle();        waypointType.setCenterAndRadius(endCoordinates, 100);        let waypointStyle = waypoint.waypointStyle(markerText + 1);        lineType.setCoordinates([startCoordinates, endCoordinates]);        waypointType.setCenterAndRadius(endCoordinates, 100)        let lineFeature = waypoint.setFeature(lineType, lineStyle);        let waypointFeature = waypoint.setFeature(waypointType, waypointStyle);        waypointFeature.set("seq", seq);        waypointFeature.set("name","waypoint");        waypointFeature.set("type","marker");        lineFeature.set("seq", seq);        lineFeature.set("name","line");        waypointFeature.set("missionNo", waypoint.getObjCnt("type", "marker")-1);        let midPoint = lineType.getFlatMidpoint();        waypoint.createPlus(midPoint, seq);        waypoint.createPopup(e);    };    waypoint.createPopup = (e)=> {        // now        let seq = waypoint.getObjCnt("type", "marker") - 1;        //let obj = waypoint.getObjByNum("type", "marker", "missionNo", seq).getGeometry().getCenter();        let obj = e.coordinate        let objCoordi= ol.proj.transform([obj[0], obj[1]], 'EPSG:5181','EPSG:4326');        //select box number        let routeTitle= createPopup.createTitle(seq + 1, "waypoint");        let routeToggle= createPopup.createToggle(seq,"waypoint");        let routeSet = createPopup.getRouteSet(seq);        routeSet.append(routeTitle, routeToggle);        let deleteBtn = routeTitle.lastChild.children[0];        deleteBtn.addEventListener("click", function(e) {            let deleteNumber =            waypoint.removeMission(seq, "waypoint");            createPopup.removePopup(seq ,routeSet);        });        let popup= createPopup.getPopupElement(seq);        popup.append(routeSet);        createPopup.setXY(seq, objCoordi);    };    //plus marker 생성    waypoint.createPlus = (coordinates,waypointSeq ) => {        let plusType = new ol.geom.Circle({});        let parentText = waypointSeq;        let midPoint= coordinates;        plusType.setCenterAndRadius(midPoint, 100)        let midPointStyle = new ol.style.Style({            fill: new ol.style.Fill({                color: ''            }),            stroke: new ol.style.Stroke({                color: 'white',                width: 2            }),            text: new ol.style.Text({                font: 'bold 20px serif',                text: '+',                fill: new ol.style.Fill({                    color: 'white'                }),            }),            zIndex: 100        })        if(waypoint.getObjCnt("type","plus") == 1) {            let feature = waypoint.getObjList("type","plus");            feature[0].setGeometry(plusType);            feature[0].set("seq", parentText);            feature[0].set("missionNo", parentText);            return false;        }        let plusFeature =  waypoint.setFeature(plusType, midPointStyle);        plusFeature.set("seq", parentText);        plusFeature.set("name", "plusToWaypoint");        plusFeature.set("type", "plus");        plusFeature.set("missionNo",parentText );    };    waypoint.plusToWaypoint= (feature)=> {        //plus marker 에 바로 위 seq 정보        let parentSeq = feature.get("seq");        //plus marker set text and style        let style = waypoint.waypointStyle(feature.get("seq") + 1);        feature.setStyle(style);        // marker seq + 1        // marker text + 1        waypoint.getObjList("type","marker").map((data) => {            let seq = data.get("seq");            if(seq >= parentSeq) {                data.set("seq",seq + 1);                //marker text == seq + 2                if(data.get("name") != "roi") {                    return data.setStyle(waypoint.waypointStyle(Number.parseInt(data.getStyle().getText().getText()) + 1));                }            }            return data;        });        let missionNo= feature.get("missionNo");        waypoint.getObjList("type","marker").map((data) => {            let seq = data.get("missionNo");            if(seq >= missionNo) {                data.set("missionNo",seq + 1);            }            return data;        });        //plus feature change        feature.set("seq", parentSeq);        feature.set("name","waypoint");        feature.set("type","marker");        feature.set("missionNo",missionNo);        // prev line 의 set start line (now plus marker prev waypoint)        let prevLineCoordi = parentSeq == 1 ? waypoint.getObjList("name","takeOff")[0].getGeometry().getCenter() :            waypoint.getObjByNum("name","waypoint","seq",parentSeq - 1).getGeometry().getCenter();        // get prev line obj        let prevLineObj = waypoint.getObjByNum("name","line","seq",parentSeq);        prevLineObj.getGeometry().setCoordinates([prevLineCoordi, feature.getGeometry().getCenter()]);        // create plus marker        let midPoint = prevLineObj.getGeometry().getFlatMidpoint();        waypoint.createPlus(midPoint, parentSeq);        // create nextLine        let lineType = new ol.geom.LineString([0,0]);        let lineStyle = waypoint.lineStyle();        let nextLineSeq = parentSeq + 1;        let startCoordinates = feature.getGeometry().getCenter()        // next waypoint feature info        let endCoordinates = waypoint.getObjByNum("name","waypoint","seq",parentSeq + 1).getGeometry().getCenter();        lineType.setCoordinates([startCoordinates,endCoordinates]);        let lineFeature = waypoint.setFeature(lineType, lineStyle);        // line seq + 1        waypoint.getObjList("name","line").map((data) => {            let seq = data.get("seq");            if(seq >= nextLineSeq) {                data.set("seq",seq + 1);            }            return data;        });        lineFeature.set("seq", nextLineSeq);        lineFeature.set("name","line");    };    waypoint.removeMission= (seq, name, el) => {                //missionNo 로 조회        let feature= waypoint.getObjByNum("name",name ,"missionNo", seq);                // line 은 waypoint seq로 조회        let lineSeq= feature.get("seq");        let lineObj= waypoint.getObjByNum("name", "line", "seq", lineSeq);        let nextLineObj= waypoint.getObjByNum("name", "line", "seq", lineSeq+1);        let missionNo= feature.get("missionNo");        waypoint.removeFeature(feature);        let prevObj        if(!(seq - 1)) {            prevObj = waypoint.getObjList("name", "takeOff")[0];        } else {            prevObj = waypoint.getObjByNum("name",name ,"missionNo", seq -1);        }        let prevCoordi= prevObj.getGeometry().getCenter();        let nextObj= waypoint.getObjByNum("name",name ,"missionNo", seq +1);        if(nextObj != undefined) {            let nextObjCoordi= nextObj.getGeometry().getCenter();            nextLineObj.getGeometry().setCoordinates([prevCoordi, nextObjCoordi]);        }        waypoint.removeFeature(lineObj);        waypoint.removeFeature(waypoint.getObjList("type","plus")[0]);        let lineList= waypoint.getObjList("name", "line");        lineList.map((data) => {            let no= data.get("seq");            if(no > lineSeq) {                data.set("seq", no - 1);            }            return data;        });        // waypoint seq 최신화        let waypointList= waypoint.getObjList("name", "waypoint");        waypointList.map((data) => {            let no= data.get("seq");            if(no > lineSeq) {                data.set("seq", no - 1);                data.setStyle(waypoint.waypointStyle(Number.parseInt(data.getStyle().getText().getText()) -1 ));            }            return data;        });        let markerList= waypoint.getObjList("type", "marker");        markerList.map((data) => {            let no= data.get("missionNo");            if(no > missionNo) {                data.set("missionNo", no - 1);            }            return data;        });    };    waypoint.translatestart= (e) => {        let feature= e.features.getArray()[0];        let seq = feature.get("seq");        if(seq - 1 == 0) {            waypoint.prevMarkerObj = waypoint.getObjByNum("name","takeOff", "seq",0);        } else {            waypoint.prevMarkerObj = waypoint.getObjByNum("name","waypoint", "seq",seq - 1);        }        waypoint.nextMarkerObj = waypoint.getObjByNum("name","waypoint", "seq",seq + 1);        waypoint.prevLineObj = waypoint.getObjByNum("name","line", "seq", seq);        waypoint.nextLineObj = waypoint.getObjByNum("name","line", "seq",seq + 1);        waypoint.prevPlusObj = waypoint.getObjList("type","plus")[0];    };    waypoint.translating= (e) => {        waypoint.prevLineObj.getGeometry().setCoordinates([waypoint.prevMarkerObj.getGeometry().getCenter(),e.coordinate])        waypoint.prevPlusObj.getGeometry().setCenter(waypoint.prevLineObj.getGeometry().getFlatMidpoint());        if(waypoint.nextMarkerObj != null) {            waypoint.nextLineObj.getGeometry().setCoordinates([waypoint.nextMarkerObj.getGeometry().getCenter(),e.coordinate])        } else if(mission.getObjList("type", "return")[0] != undefined) {            let line= mission.getObjList("type", "return")[0];            let homeObj= waypoint.getObjByNum("name", "takeOff", "seq",0);            line.getGeometry().setCoordinates([homeObj.getGeometry().getCenter(),e.coordinate]);        }    };    waypoint.translateend= (e) => {        mapManager.map.removeInteraction(waypoint.translate);    };    waypoint.waypointStyle= (number) => {        let style = new ol.style.Style({            fill: new ol.style.Fill({                color: 'green'            }),            stroke: new ol.style.Stroke({                color: 'green',                width: 2            }),            text: new ol.style.Text({                font: 'bold 10px serif',                text: `${number}`,                fill: new ol.style.Fill({                    color: 'white'                }),            }),            zIndex: 100        })        return style;    };    waypoint.lineStyle= () => {        let style= new ol.style.Style({            fill: new ol.style.Fill({                color: 'rgba(255, 255, 255, 0.2)',            }),            stroke: new ol.style.Stroke({                color: 'black',                width: 5,            })        });        return style;    };const returnHome = Object.create(mission);    returnHome.init= () => {    };    returnHome.initEvent= () => {        let returnBtn= common.getQs("#return_btn");        returnBtn.addEventListener("click", returnHome.createReturn);    };    returnHome.createReturn= (e) => {        if(returnHome.getObjCnt("type", "return") == 1) {            alert("이미 생성되어 있습니다.");            return false;        }        let max= returnHome.getObjMax("name", "waypoint");        if(max < 0) {            alert("미션을 입력하세요");            return false;        };        let lastObj= returnHome.getObjByNum("name", "waypoint", "seq",max);        let homeObj= returnHome.getObjByNum("name", "takeOff", "seq",0);        let lineType= new ol.geom.LineString([0,0]);        let lineStyle= returnHome.lineStyle();        let lineMax= returnHome.getObjMax("name", "line");        if(lineMax < 0) {            alert("미션을 입력하세요");            return false;        };        lineType.setCoordinates([lastObj.getGeometry().getCenter(), homeObj.getGeometry().getCenter()]);        let lineFeature= returnHome.setFeature(lineType, lineStyle);        lineFeature.set("seq", lineMax+ 1);        lineFeature.set("name", "line");        lineFeature.set("type", "return");    };    returnHome.lineStyle= () => {        let style= new ol.style.Style({            fill: new ol.style.Fill({                color: "red",            }),            stroke: new ol.style.Stroke({                color: "red",                width: 5,            })        });        return style;    };const roi = Object.create(mission);    roi.init= () => {    };    roi.initEvent= () => {        let roiBtn = common.getQs("#roi_btn");        roiBtn.addEventListener("click", function(e) {            // 아이콘 클릭 이벤트            mapManager.setMapEventListener("click", roi.mapClickListener);            // 버튼 초기화            roi.btnActiveSet(roiBtn);            // passive            if(roiBtn.getAttribute("class")== "active") {                roiBtn.setAttribute("class", "");                mapManager.removeMapEventListener("click", roi.createRoi);                // active            } else {                roiBtn.setAttribute("class", "active");                mapManager.setMapEventListener("click", roi.createRoi);            }        });    };    roi.mapClickListener=(e) => {        mapManager.map.forEachFeatureAtPixel(e.pixel, function(f) {            let feature= f;            if(feature.get("name") == "roi") {                roi.checkInteraction("translate");                let translate = roi.getTranslate(feature);                roi.setTranslateCollectionEvent("translatestart",roi.translatestart);                roi.setTranslateCollectionEvent("translating",roi.translating);                roi.setTranslateCollectionEvent("translateend",roi.translateend);                translate.set("type","translate");                mapManager.map.addInteraction(translate);            }        }); // forEachFeatureAtPixel    }    roi.createRoi= (e) => {        if(mapManager.map.hasFeatureAtPixel(mapManager.map.getEventPixel(e.originalEvent))) return false;        let coordinates= e.coordinate;        let roiType= new ol.geom.Circle({});        let seq= roi.getObjCnt("type","marker");        let style= roi.roiStyle();        roiType.setCenterAndRadius(coordinates, 100);        let roiFeature= roi.setFeature(roiType, style);        roiFeature.set("seq", seq);        roiFeature.set("name", "roi");        roiFeature.set("type", "marker");        roiFeature.set("missionNo", seq);        roi.createPopup(e);    };    roi.createPopup = (e)=> {        // now        let seq = waypoint.getObjCnt("type", "marker") - 1;        let obj = e.coordinate;        let objCoordi= ol.proj.transform([obj[0], obj[1]], 'EPSG:5181','EPSG:4326');        //select box number        let routeTitle= createPopup.createTitle(seq + 1, "roi");        let routeToggle= createPopup.createToggle(seq,"roi");        let routeSet = createPopup.getRouteSet(seq);        routeSet.append(routeTitle, routeToggle);        let popup= createPopup.getPopupElement(seq);        popup.append(routeSet);        createPopup.setXY(seq, objCoordi);    };    roi.roiStyle= () => {        let style = new ol.style.Style({            fill: new ol.style.Fill({                color: 'green'            }),            stroke: new ol.style.Stroke({                color: 'green',                width: 2            }),            text: new ol.style.Text({                font: 'bold 20px serif',                text: 'R',                fill: new ol.style.Fill({                    color: 'white'                }),            }),            zIndex: 100        });        return style;    };    roi.translatestart=(e) => {    };    roi.translating=(e) => {        let feature= e.features.getArray()[0];        feature.getGeometry().setCenter(e.coordinate);    };    roi.translateend=(e) => {        mapManager.map.removeInteraction(roi.translate);    };