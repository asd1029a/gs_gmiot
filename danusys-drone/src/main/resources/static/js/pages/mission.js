'use strict'document.addEventListener("DOMContentLoaded",function () {});const pageMission = {    init : () => {        mapManager.createVectorLayer("missionLayer",null,new ol.source.Vector({}));        mission.init();        takeOff.init();        takeOff.initEvent();        waypoint.init();        waypoint.initEvent();        roi.init();        roi.initEvent();        returnHome.init();        returnHome.initEvent();        editLock.init();        editLock.initEvent();        pageMission.lnbMenuInit();    },    lnbMenuInit: async function(obj={}) {        if(!Object.keys(obj).length) {            obj.name="";            obj.droneId= "";        };        const list = await axios.post("/drone/api/mission", obj);        const listCnt = common.getQs(".subTitle dt");        const cntSpan = common.crtEl("span");        cntSpan.innerText = list.data.length;        listCnt.innerText = "";        listCnt.append("목록 ", cntSpan);        const div = common.getQs(".listScroll");        div.innerText = "";        const ul = common.crtEl("ul");        list.data.map((data) => {            const li = common.crtEl("li");            const dl = common.crtEl("dl");            const dt = common.crtEl("dt");            const span1 = common.crtEl("span");            li.dataset.id = data.id;            li.dataset.userId = data.userId;            li.dataset.updateDt = data.updateDt;            li.dataset.name = data.name;            li.dataset.totalDistance = data.totalDistance;            li.dataset.time = data.estimatedTime;            if(data.droneId != "0") {                span1.className = "green";                span1.innerText = "운용중";            } else {                span1.className = "gray";                span1.innerText = "임시저장";            }            const dd = common.crtEl("dd");            const i = common.crtEl("i");            const img = common.crtEl("img");            img.src = "images/default/listMore.svg";            i.append(img);            i.addEventListener("click", function(e) {                const listMore = common.getQs(".listMore");                listMore.classList.toggle("on");                listMore.style.left = `${this.offsetLeft + 30}px`                listMore.style.top = `${this.offsetTop + 20}px`                listMore.dataset.id = data.id;            });            dt.append(span1,data.name);            dd.append(i);            dl.append(dt,dd);            const p1 = common.crtEl("p");            const p2 = common.crtEl("p");            p1.innerText = `ID : ${data.userId}`;            p2.innerText = data.updateDt;            li.append(dl, p1, p2);            li.addEventListener("click", pageMission.lnbMenuClickEvent);            ul.append(li);        });        div.append(ul);    },    lnbMenuClickEvent: async function(e) {        const missionSummary = common.getQs(".missionSummary");        missionSummary.style.display = "block";        let id = Number.parseInt(this.dataset.id);        const routeContents = common.getQs(".routeContents");        if(id != routeContents.dataset.id && routeContents.dataset.id != undefined) {            /*if(!confirm("미션이 저장되지 않았습니다 나가기 하시겠습니까?")) {                routeContents.dataset.id = undefined;                return false;            }*/        }        routeContents.dataset.id = id;        let data = await axios.post("/drone/api/missiondetails", {            id: id        });        pageMission.setMissionDetails(data.data);        pageMission.setMissionSummary(this);    },    createMissionPopup: function(data) {        const popup = common.getQs(".popup");        popup.style.display = "block";        if(!data) {            return false;        }        const name = popup.querySelector("#mission-name");        const id =  popup.querySelector("#mission-id");        name.value= data.name;        id.value = data.userId;        popup.dataset.id = data.id;    },    closePopup() {        const missionName = common.getQs("#mission-name");        //login 로그인 보류        //const id = common.getQs("#mission-userId");        const popup = common.getQs(".popup");        const listMore = common.getQs(".listMore");        missionName.value = "";        popup.style.display = "none";        listMore.classList.remove("on");    },    saveMission: async function() {        const userId = common.getQs("#mission-id").value;        const name = common.getQs("#mission-name").value;        const popup = common.getQs(".popup");        let id = popup.dataset.id;        if(id) {            id = Number.parseInt(popup.dataset.id);        }        if(!name) {            alert("미션 명을 입력하세요.");            return false;        };        const check = await axios.put("/drone/api/mission",{            name: name, userId: userId, id:id        });                check.data == "0" ? alert("저장 실패") : alert("저장 성공");        pageMission.lnbMenuInit();        pageMission.closePopup();    },    changeMissionName: function(obj) {        const listMore = obj.closest(".listMore");        let id = Number.parseInt(listMore.dataset.id);        let el = common.getQs(`.listScroll [data-id='${id}']`);        pageMission.createMissionPopup(el.dataset);        listMore.classList.remove("on");    },    deleteMission: async function(obj) {        const listMore = obj.closest(".listMore");        let id = Number.parseInt(listMore.dataset.id);        const check = await axios.delete("/drone/api/mission",{            data: {id: id}        });        check.data == "fail" ? alert("삭제 실패") : alert("삭제 성공");        pageMission.lnbMenuInit();        createPopup.clearPopup();        listMore.classList.remove("on");        const missionSummary = common.getQs(".missionSummary");        missionSummary.style.display = "none";    },    setMissionDetails: function(data) {        createPopup.clearPopup();        if(!data) return false;        if(data[0].name != "takeOff") return false;        mapManager.map.getView().setCenter(ol.proj.transform([data[0].mapX, data[0].mapY],mapManager.baseProjection, mapManager.projection));        data.map((data) => {            const checkMissionName = data.name;            let obj={};            obj.coordinate = ol.proj.transform([data.mapX, data.mapY],mapManager.baseProjection, mapManager.projection);            if(checkMissionName =="takeOff") {                takeOff.createTakeOff(obj);            } else if(checkMissionName == "waypoint" || checkMissionName == "loi") {                obj.missionName = checkMissionName;                waypoint.createWaypoint(obj);            } else if(checkMissionName == "roi") {                roi.createRoi(obj);            } else {                returnHome.createReturn();            }            const routeSet = common.getQs(`.routeSet[data-seq='${data.index}']`);            const keyArr = Object.keys(data);            keyArr.map((key) => {                let id = routeSet.querySelector(`#${key}`);                if(id) {                    id.value = data[key];                }            });        });    },    setMissionSummary: function(data) {        const summaryName = common.getQs("#summaryName");        const summaryDistance = common.getQs("#summaryDistance");        const summaryTime = common.getQs("#summaryTime");        const summaryUserId = common.getQs("#summaryUserId");        const summaryUpdateDt = common.getQs("#summaryUpdateDt");        summaryName.innerText = "";        summaryDistance.innerText = "";        summaryTime.innerText = "";        summaryUserId.innerText = "";        summaryUpdateDt.innerText = "";        summaryName.append(data.dataset.name);        summaryDistance.append(data.dataset.totalDistance);        summaryTime.append(data.dataset.time);        summaryUserId.append(data.dataset.userId);        summaryUpdateDt.append(`(${data.dataset.updateDt})`);    },    searchMission: function() {        const searchInput = common.getQs(".searchInput input")        let key = common.getQs("input[type='radio']:checked");        const obj = {};        obj[key.id] = searchInput.value;        obj.droneId = common.getQs(".selectBox.type03 .list li.selected").getAttribute("value")        pageMission.lnbMenuInit(obj);    },}// right popup funcconst createPopup= {    createTitle: (index , name, koName) => {        const routeDl = common.crtEl("dl");        routeDl.className = "routeTitle";        // routeTitle dt        const dtSpan = common.crtEl("span")        const routeDt = common.crtEl("dt");        dtSpan.className = "num";        dtSpan.innerText=index;        let selectBox;        if(name == "takeOff" || name == "return") {            const localSelectBox = common.crtEl("div");            localSelectBox.className = "selectBox";            localSelectBox.classList.add("type1");            const box = common.crtEl("div");            box.className = "box";            const select = common.crtEl("div");            select.className = "select";            select.innerText = koName;            select.dataset.val = name;            box.append(select);            localSelectBox.append(box);            selectBox = localSelectBox;        } else {            selectBox = createPopup.createSelectBox(index,name, mission.list);        }        routeDt.append(dtSpan, selectBox);        // routeTitle dd        const routeDd= common.crtEl("dd");        const deleteSpan= common.crtEl("span");        deleteSpan.className= "button";        deleteSpan.innerText= "삭제";        const deleteI= common.crtEl("i");        deleteI.id = "display_btn";        deleteI.className = "displayBtn";        deleteI.addEventListener("click", function(e) {            let routeToggle = this.closest(".routeTitle").nextSibling;            routeToggle.classList.toggle("on");            if(routeToggle.classList.contains("on")) {                routeToggle.style.display= "block";            } else {                routeToggle.style.display= "none";            }        });        const deleteImg= common.crtEl("img");        deleteImg.src="images/default/arrowBottom.svg";        deleteI.append(deleteImg);        routeDd.append(deleteSpan, deleteI);        routeDl.append(routeDt,routeDd);        return routeDl;    },    createToggle: (name, data) => {        /*const mission= common.postAxios(await axios.post("/drone/api/getTestData", {            "url":"data/mission.json"        }));*/        const routeToggle= common.crtEl("div");        routeToggle.className="routeToggle";        const coordinateUl= common.crtEl("ul");        coordinateUl.className="coordinate";        let missionName;        if(name == "waypoint") {            missionName = mission.param1;        } else if(name == "loi") {            missionName = mission.param2;        } else if(name == "roi" || name == "takeOff") {            missionName = mission.param3;        } else {            return false;        }        missionName.map((data) => {            const li = common.crtEl("li");            const labelSpan = common.crtEl("span");            labelSpan.innerText = data.name;            const contextSpan = common.crtEl("span");            const input = common.crtEl("input");            input.type = "text";            input.placeholder = "0.0000";            input.id = `${data.id}`            contextSpan.append(input, data.unit);            li.append(labelSpan, contextSpan);            coordinateUl.append(li);        });        routeToggle.append(coordinateUl);        return routeToggle;    },    createSelectBox: (index,id, missionList) => {        const selectBoxDiv= common.crtEl("div");        selectBoxDiv.className="selectBox";        selectBoxDiv.classList.add(`type${index}`);        const divBox= common.crtEl("div");        divBox.className="box";        const selectDiv= common.crtEl("div");        selectDiv.className="select";        //selectDiv.innerText= name;        selectDiv.dataset.val = id        const ulList= common.crtEl("ul");        ulList.className= "list";        ulList.style.display="none";        missionList.map((value) => {            const li= common.crtEl("li");            li.innerText= value.name;            if(value.id == id) {                li.className= "selected";                selectDiv.innerText = value.name;            }            li.addEventListener("click", function(e) {                selectDiv.dataset.val = value.id;                createPopup.changeMission(selectDiv.dataset.val, this.closest(".routeSet"));            });            return ulList.append(li);        });        divBox.append(selectDiv, ulList);        selectBoxDiv.append(divBox);        let checked = false;        selectBoxDiv.addEventListener("click", function(e) {            if(checked) {                this.classList.remove("on");                checked= false;            } else {                this.classList.add("on");                checked= true;            }            if(this.classList.contains("on")) {                this.children[0].children[1].style.display="block";            } else {                this.children[0].children[1].style.display="none";            }        });        return selectBoxDiv;    },    getPopupElement: function(seq) {        const routeContents = common.getQs(".routeContents");        /*routeContents.addEventListener("click", function(e) {            mission.getObjByNum("type", "marker", "missionNo", seq);        });*/        return routeContents;    },    detailPopup: function(data) {    },    // popup base set    setXY: function(el, obj) {        let coordinates = ol.proj.transform([obj[0], obj[1]],mapManager.projection, mapManager.baseProjection);        const mapX = el.querySelector(`#mapX`);        const mapY = el.querySelector(`#mapY`);        const routeToggle = el.querySelector(`.routeToggle`);        routeToggle.style.display = "none";        mapX.value = coordinates[0];        mapY.value = coordinates[1];        el.scrollIntoView();    },    createRouteSet: function(seq) {        const routeSet= common.crtEl("div");        routeSet.className = "routeSet";        routeSet.dataset.seq = seq;        return routeSet;    },    removePopup: function(seq,el) {        // text number update        const num = common.getQsAll(".num");        const routeSet = common.arr.call(common.getQsAll(".routeSet"));        common.arr.call(num).map((data) => {            let textNumber = Number.parseInt(data.textContent);            if(textNumber > (Number.parseInt(seq) + 1)) {                textNumber -= 1            }            return data.textContent = textNumber;        });        // routeSet number -1 update        routeSet.map((data) => {            let datasetSeq = Number.parseInt(data.dataset.seq);            if(datasetSeq > seq) {                datasetSeq -= 1;            }            return data.dataset.seq = datasetSeq;        });        common.getQs(".routeContents").removeChild(el);    },    removeMissionName: function(seq,name) {        let rtnVal = true;        //returnHome check        returnHome.removeReturnHome();        if(name == "waypoint" || name == "loi") {            waypoint.removeMission(seq,"waypoint");        } else if(name == "roi") {            roi.removeMission(seq,name);        } else if(name == "takeOff"){            let check = mission.getObjCnt("type","marker");            if(check != "1") {                alert("이륙 미션은 첫번째 순서여야 합니다.");                return false;            }            mission.removeFeature(mission.layer, mission.getObjList("name", "takeOff")[0]);        } else {            return !rtnVal;        }        return rtnVal;    },    routeSetIncre: function(missionNo) {        // routeSet info        let routeSet = common.arr.call(common.getQsAll(".routeSet"));        // num info        let num = common.getQsAll(".num");        // routeSet dataset update        routeSet.map((data) => {            let datasetSeq = Number.parseInt(data.dataset.seq);            if(datasetSeq >= missionNo) {                datasetSeq += 1;            }            return data.dataset.seq = datasetSeq;        });        // num textContent update        common.arr.call(num).map((data) => {            let textNumber = Number.parseInt(data.textContent);            if(textNumber >= missionNo + 1) {                textNumber = textNumber + 1;            }            return data.textContent = textNumber;        });    }, changeMission: function(changeMission, el ) {        let routeToggle = el.querySelector(".routeToggle")        let seq = Number.parseInt(el.dataset.seq);        let feature = mission.getObjByNum("type", "marker", "missionNo", seq);        let prevMission = feature.get("name");        let style;        if(mission.getObjCnt("type", "plus")) {            mission.removeFeature(mission.layer, mission.getObjList("type","plus")[0]);        }        if(changeMission == "waypoint") {            let text = seq + 1;            style = waypoint.setIconStyle(text);        } else if(changeMission == "loi"){            feature.set("subName", "loi");            style = loi.setIconStyle("L");        } else {            style = roi.setIconStyle("R");        }        if(prevMission == changeMission && feature.get("subName") != "loi") {            return false;        }        // input refresh        routeToggle.remove();        routeToggle = createPopup.createToggle(changeMission);        routeToggle.style.display= "none";        el.append(routeToggle);        createPopup.setXY(el, feature.getGeometry().getCoordinates());        if(prevMission == "waypoint" || prevMission == "loi") {            if(changeMission == "roi") {                returnHome.removeReturnHome();                let prevLineObj = mission.getObjByNum("name", "line", "seq", feature.get("seq"));                let nextLineObj;                let nextMissionObj;                let prevMissionObj;                let getSeq = feature.get("seq");                let waypointCnt = mission.getObjCnt("name", "waypoint");                if(waypointCnt == feature.get("seq")) {                    mission.removeFeature(mission.layer, prevLineObj);                } else {                    nextMissionObj = mission.getObjByNum("name", "waypoint", "seq", getSeq + 1);                    prevMissionObj = mission.getObjByNum("name", "waypoint", "seq", getSeq - 1);                    if(prevMissionObj == undefined) {                        prevMissionObj = mission.getObjList("name", "takeOff")[0];                    }                    nextLineObj = mission.getObjByNum("name", "line", "seq", getSeq + 1);                    mission.removeFeature(mission.layer, nextLineObj);                    prevLineObj.getGeometry().setCoordinates([prevMissionObj.getGeometry().getCoordinates(), nextMissionObj.getGeometry().getCoordinates()]);                }                feature.set("name", "roi");                let lineList= waypoint.getObjList("name", "line");                lineList.map((data) => {                    let no= data.get("seq");                    if(no > getSeq) {                        data.set("seq", no - 1);                    }                    return data;                });                let waypointList= waypoint.getObjList("name", "waypoint");                waypointList.map((data) => {                    let no= data.get("seq");                    if(no > getSeq) {                        data.set("seq", no - 1);                    }                    return data;                });                // change waypoint => loi            }  // loi        } else if(prevMission == "loi") {        } else if(prevMission == "roi") {            //returnHome check            returnHome.removeReturnHome();            let missionList = mission.getObjList("type", "marker");            let lineType = new ol.geom.LineString([0,0]);            let lineStyle = waypoint.lineStyle();            let startCoordinates;            let endCoordinates;            let getSeq;            let nextSeq = Math.min(...missionList.filter((data) => {                return data.get("missionNo") > seq && data.get("name") == "waypoint";            }).map((data) => {                return data.get("seq")            }));            let prevSeq = Math.max(...missionList.filter((data) => {                return data.get("missionNo") < seq && data.get("name") == "waypoint";            }).map((data) => {                return data.get("seq");            }));            let nextWaypoint = mission.getObjByNum("name", "waypoint", "seq" , nextSeq);            let prevWaypoint = mission.getObjByNum("name", "waypoint", "seq" , prevSeq);            if(!prevWaypoint) {                prevWaypoint = mission.getObjList("name", "takeOff")[0];            }            // have next waypoint            if(nextWaypoint != undefined) {                getSeq = nextWaypoint.get("seq");                let nextLineObj = mission.getObjByNum("name", "line", "seq" , getSeq);                startCoordinates = feature.getGeometry().getCoordinates();                endCoordinates = nextWaypoint.getGeometry().getCoordinates();                lineType.setCoordinates([prevWaypoint.getGeometry().getCoordinates(),startCoordinates]);                nextLineObj.getGeometry().setCoordinates([startCoordinates, endCoordinates]);                mission.getObjList("name","line").map((data) => {                    let num = data.get("seq");                    if(num >= getSeq) {                        data.set("seq",num + 1);                    }                    return data;                });                mission.getObjList("name","waypoint").map((data) => {                    let num = data.get("seq");                    if(num >= getSeq) {                        data.set("seq",num + 1);                    }                    return data;                });            // don't have            } else {                getSeq = mission.getObjCnt("name", "line") + 1;                startCoordinates = prevWaypoint.getGeometry().getCoordinates();                endCoordinates = feature.getGeometry().getCoordinates();                lineType.setCoordinates([startCoordinates, endCoordinates]);            }            let lineFeature = waypoint.setFeature(lineType, lineStyle);            lineFeature.set("seq", getSeq);            lineFeature.set("name","line");            feature.set("seq", getSeq);            feature.set("name","waypoint");        }        feature.setStyle(style);    },    saveMissionDetail: async function() {        const routeSets = common.arr.call(common.getQsAll(".routeSet"));        const obj = {};        const missionList = [];        const missionId = Number.parseInt(common.getQs(".routeContents").dataset.id);        if(!missionId) return false;        let checkReturn = common.getQs(".routeContents").lastChild.querySelector(".select").textContent;        if(checkReturn !== "귀환") {            alert("귀환 명령을 넣어주세요");            return false;        }        routeSets.map((data) => {            const jsonObj = {};            let checkVal = data.querySelector(".select").dataset.val;            let mapX;            let mapY;            let mapZ;            jsonObj.name = checkVal;            jsonObj.index = data.dataset.seq;            if(checkVal == "return") {                missionList.push(jsonObj);                return false;            }            mapX = data.querySelector("#mapX");            mapY = data.querySelector("#mapY");            mapZ = data.querySelector("#mapZ");            jsonObj.gpsX = mapX.value;            jsonObj.gpsY = mapY.value;            jsonObj.alt = mapZ.value;            if(checkVal == "waypoint" || checkVal == "loi") {                // loiter count == stop time                const time = data.querySelector("#time")                const speed = data.querySelector("#speed")                const radius = data.querySelector("#radius")                const yaw = data.querySelector("#yaw")                jsonObj.time = time.value;                jsonObj.speed = speed.value;                if(radius) {                    jsonObj.radius = radius.value;                }                if(yaw) {                    jsonObj.yaw = yaw.value;                }            }            missionList.push(jsonObj);        });        obj.missionList = missionList;        let totalDistance = mission.getTotalDistance();        const check = await axios.put("/drone/api/missiondetails", {            missionId: missionId,            totalDistance: totalDistance,            missionList: missionList        });        check.data == "fail" ? alert("저장 실패") : alert("저장 성공");        pageMission.lnbMenuInit();        const missionSummary = common.getQs(".missionSummary");        missionSummary.style.display = "none";    },    clearPopup: function() {        common.getQs(".routeContents").innerHTML="";        mission.removeFeatureAll(mission.layer);    },    addDeleteBtnEvent: function(el) {        const deleteBtn = el.querySelector(".routeTitle dd .button")        deleteBtn.addEventListener("click", function(e) {            let check = createPopup.removeMissionName(el.dataset.seq, el.querySelector(".select").dataset.val);            if(check) {                createPopup.removePopup(el.dataset.seq ,el);            }        });    },    init: () => {    },    initEvent: () => {    },}// base mission funcconst mission = {    list: [        {id:"waypoint", name:"경유지"},        {id:"loi", name:"LOI"},        {id:"roi", name:"ROI"},    ],    param1: [{name:"위도",unit:"m", id: "mapX"}, {name:"경도",unit:"m", id: "mapY"}, {name:"고도",unit:"m", id: "mapZ" }, {name:"정지",unit:"초", id: "time" }, {name:"속도",unit:"km", id: "speed" }, {name:"YAW",unit:"Deg", id: "yaw" }],    param2: [{name:"위도",unit:"m", id: "mapX"}, {name:"경도",unit:"m", id: "mapY"}, {name:"고도",unit:"m", id: "mapZ" }, {name:"회전",unit:"cnt", id: "time" }, {name:"속도",unit:"km", id: "speed" }, {name:"반지름",unit:"m", id: "radius" }],    param3: [{name:"위도",unit:"m", id: "mapX"}, {name:"경도",unit:"m", id: "mapY"}, {name:"고도",unit:"m", id: "mapZ" }],    map: null,    layer: null,    translate: null,    editBtnEl: null,    getTotalDistance: function() {        const lineList = mission.getObjList("name", "line");        let totalDistance = 0;        lineList.map((data) => {            totalDistance += Math.round(data.getGeometry().getLength());        });        return totalDistance;    }    ,setFeature: (featureType,style,layer) => {        // feature 생성 featntents.ure 타입 input        let feature = new ol.Feature();        feature.setGeometry(featureType);        feature.setStyle(style);        let source;        if(!layer) {            source = mission.layer.getSource();        } else {            source = layer.getSource();        }        source.addFeature(feature);        source.addFeatures(feature);        return feature;    },getTranslate: (feature) => {        let translate = new ol.interaction.Translate({            features: new ol.Collection([feature])        });1        mission.translate = translate;        return mission.translate;    },    setTranslateCollectionEvent: (name,listener) => {        mission.translate.on(name,listener);    },getObjByNum: (key, val, numberInfo, number) => {        let featureList= mission.layer.getSource().getFeatures();        return featureList.find((data) => {            if(data.get(key) == val) {                if(data.get(numberInfo) == undefined) {                    return null;                } else if(data.get(numberInfo) == number){                    return data;                }            }        })    },getObjCnt: (type, val) => {        let featureList= mission.layer.getSource().getFeatures();        return featureList.filter((data) => {            return (data.get(type) == val);        }).length;    },getObjList: (type, val) => {        let featureList= mission.layer.getSource().getFeatures();        return featureList.filter((data) => {            return (data.get(type) == val);        });    }, getObjMax: (type, val) => {        let featureList= mission.getObjList(type, val).map((data) => {            return data.get("seq");        });        return Math.max(...featureList);    }, checkInteraction: (type) => {        let checkInteraction = mapManager.map.getInteractions().getArray();        return checkInteraction.find((data) => {            if(data.get("type") == type) {                mapManager.map.removeInteraction(data);            }        })    },removeFeature: (layer = undefined, feature) => {        layer.getSource().removeFeature(feature);    },removeFeatureAll: (layer = undefined) => {        let features = layer.getSource().getFeatures();        features.map((feature) => {            return mission.removeFeature(layer, feature);        });    },    btnActiveSet: (el) => {        //edit click remove listener        mission.editBtnEl.map((data) => {            if(data.getAttribute("id") != el.getAttribute("id")) {                if(data.getAttribute("class") == "active") {                    let event= new MouseEvent("click", {});                    data.dispatchEvent(event);                }            };            return mission.editBtnEl;        });    }, decreaseMissionList: (missionNo) => {        let markerList= mission.getObjList("type", "marker");        markerList.map((data) => {            let no= data.get("missionNo");            if(no > missionNo) {                data.set("missionNo", no - 1);            }            return data;        });    }, updateIconTextNumber: (lineSeq) => {        let missionList= mission.getObjList("type", "marker");        let missionListSort = missionList.sort((a,b) => {return a.get("missionNo") - b.get("missionNo")});        missionListSort.map((data) => {            if(data.get("name") != "roi" && data.get("subName") != "loi") {                return data.setStyle(waypoint.setIconStyle(data.get("missionNo")+1));            }        });    },    setIconStyle(text) {        let style = new ol.style.Style({            image: new ol.style.Icon({                src: "/images/test/mission_green.png",            }),            text: new ol.style.Text({                font: 'bold 20px bold',                fill: new ol.style.Fill({ color: 'white' }),                text: `${text}`,            }),            zIndex: 100        })        return style;    },    init: () => {        mission.layer = mapManager.getVectorLayer("missionLayer");        mission.editBtnEl= common.arr.call(common.getQs(".missionEdit ul").children);        mission.initEvent();    },initEvent: () => {    }}const editLock = Object.create(mission);    editLock.elements = undefined;    editLock.init=() => {        editLock.elements = common.arr.call(common.getQs(".missionEdit ul").children);        editLock.editActive("disabled");    };    editLock.initEvent= () => {        let editLockBtn= common.getQs("#edit_lock_btn");        editLockBtn.addEventListener("click", function() {            const missionId = Number.parseInt(common.getQs(".routeContents").dataset.id);            if(!missionId) {                alert("미션을 선택해 주세요");                return false;            }            if(editLockBtn.getAttribute("class")== "on") {                editLockBtn.setAttribute("class", "off");                editLock.editActive("disabled");            } else {                editLockBtn.setAttribute("class", "on");                editLock.editActive("");            }        });    };    editLock.editActive=(state) => {        editLock.elements.map((el) => {            if(el.id!= "edit_lock_btn") {                el.setAttribute("class", state);            }        })    };const takeOff = Object.create(mission);    //takeOff.    //properties    takeOff.firstLine= null;    takeOff.firstCoordi= null;    takeOff.firstPlusFeature= null;    takeOff.init = () => {    };    takeOff.initEvent= () => {        let takeOffBtn= common.getQs("#take_off_btn");        mapManager.setMapEventListener("click", takeOff.mapClickListener);        takeOff.mapPointermoveEvent();        takeOffBtn.addEventListener("click",function(e) {            let check = takeOff.getObjCnt("name", "takeOff");            if(check != "0") {                return false;            }            takeOff.createTakeOff();        });    };    takeOff.mapClickListener= (e) => {        mapManager.map.forEachFeatureAtPixel(e.pixel, function(f) {            let feature = f;            //lineString 과 take off 제외            if(feature.get("name") != "takeOff") {                return false;            }            takeOff.checkInteraction("translate");            if(mission.getObjList("type","plus").length != 0) {                let firstPlusFeature= takeOff.getObjList("type","plus")[0];                mission.removeFeature(mission.layer, firstPlusFeature);            }            let translate = takeOff.getTranslate(feature);            takeOff.setTranslateCollectionEvent("translatestart",takeOff.translatestart);            takeOff.setTranslateCollectionEvent("translating",takeOff.translating);            takeOff.setTranslateCollectionEvent("translateend",takeOff.translateend);            mapManager.map.addInteraction(translate);        });    };    takeOff.mapPointermoveEvent= () => {        mapManager.setMapEventListener("pointermove",function(evt) {            let markerChk = takeOff.getObjCnt("name","takeOff")  == 0;            let hit = mapManager.map.hasFeatureAtPixel(mapManager.map.getEventPixel(evt.originalEvent));            evt.target.getTargetElement().style.cursor = markerChk ?                '' : hit ? 'pointer' : '';        });    };    takeOff.createTakeOff= (data) => {        let featureType= new ol.geom.Point({});        let coordinate;        if(!data) {            coordinate = mapManager.map.getView().getCenter();        } else {            coordinate = data.coordinate;        }        featureType.setCoordinates(coordinate)        let takeOffFeature = takeOff.setFeature(featureType,waypoint.setIconStyle(1));        takeOffFeature.set("seq", takeOff.getObjCnt("type","marker"));        takeOffFeature.set("type", "marker");        takeOffFeature.set("name","takeOff");        takeOffFeature.set("missionNo", 0);        takeOff.createPopup();    };    takeOff.createPopup = (e)=> {        let seq = 0;        let obj= takeOff.getObjList("name", "takeOff")[0].getGeometry().getCoordinates();        let routeTitle= createPopup.createTitle(1, "takeOff", "이륙");        let routeToggle= createPopup.createToggle("takeOff");        let routeSet = createPopup.createRouteSet(seq);        routeSet.append(routeTitle, routeToggle);        //add delete btn event        createPopup.addDeleteBtnEvent(routeSet);        let popup= createPopup.getPopupElement();        popup.append(routeSet);        createPopup.setXY(routeSet, obj);    };    takeOff.translatestart= (e) => {        if(takeOff.getObjCnt("name","line")== 0) {            return false;        }        // 변경할 라인 객체 선택( 첫번째 라인)        takeOff.firstLine= takeOff.getObjByNum("name","line", "seq", 1);        // 고정할 라인 위도경도 선택 (두번째 마커)        takeOff.firstCoordi= takeOff.getObjByNum("name","waypoint", "seq",1).getGeometry().getCoordinates();    };    takeOff.translating= (e) => {        let feature = e.features.getArray()[0];        let popupNo = feature.get("missionNo");        const routeSet = common.getQs(`.routeSet[data-seq='${popupNo}']`);        createPopup.setXY(routeSet, e.coordinate);        if(takeOff.firstLine != null) {            takeOff.firstLine.getGeometry().setCoordinates([takeOff.firstCoordi, e.coordinate]);        }        if(takeOff.getObjList("name", "return")[0] != undefined) {            let line= takeOff.getObjList("name", "return")[0];            let max= takeOff.getObjMax("name", "waypoint");            let lastObj= takeOff.getObjByNum("name", "waypoint", "seq",max);            line.getGeometry().setCoordinates([lastObj.getGeometry().getCoordinates(),e.coordinate]);        }    };    takeOff.translateend= (e) => {        mapManager.map.removeInteraction(takeOff.translate);    };const waypoint = Object.create(mission);    waypoint.prevMarkerObj= null;    waypoint.nextMarkerObj= null;    waypoint.prevLineObj= null;    waypoint.nextLineObj= null;    waypoint.prevPlusObj= null;    waypoint.plusMarker= null;    waypoint.clickMarker= false;    waypoint.init = () => {        /*if(data != null) {            waypoint.createWaypoint(data);        }*/    };    waypoint.initEvent = () => {        let waypointBtn = common.getQs("#waypoint_btn");        //이동 및 수정은 언제나 활성화        mapManager.setMapEventListener("click",waypoint.mapClickListener);        waypointBtn.addEventListener("click",function(e) {            // 실행되어져있는 listener 삭제            waypoint.btnActiveSet(waypointBtn);            // passive            if(waypointBtn.getAttribute("class")== "active") {                waypointBtn.setAttribute("class", "");                mapManager.removeMapEventListener("click", waypoint.createWaypoint);            // active            } else {                waypointBtn.setAttribute("class", "active");                mapManager.setMapEventListener("click", waypoint.createWaypoint);            }        });    };    waypoint.mapClickListener= (e) => {        mapManager.map.forEachFeatureAtPixel(e.pixel, function(f) {            let feature = f;            if(feature.get("name") == "plusToWaypoint") {                waypoint.plusToWaypoint(feature);            }            if(feature.get("name") == "waypoint") {                waypoint.checkInteraction("translate");                let translate = waypoint.getTranslate(feature);                let seq = feature.get("seq");                let prevLineObj = waypoint.getObjByNum("name","line", "seq",seq);                waypoint.createPlus(prevLineObj.getGeometry().getFlatMidpoint(),seq);                waypoint.setTranslateCollectionEvent("translatestart",waypoint.translatestart);                waypoint.setTranslateCollectionEvent("translating",waypoint.translating);                waypoint.setTranslateCollectionEvent("translateend",waypoint.translateend);                translate.set("type","translate");                mapManager.map.addInteraction(translate);            }        });    }    //line, waypoint, midpoint 지정    waypoint.createWaypoint= (e) => {        if(!waypoint.getObjCnt("name", "takeOff")) {            alert("이륙 미션을 생성해주세요");            return false;        }        //not click        if(e.originalEvent != undefined) {            // pixel has feature => true ? return false : return true; //            if(mapManager.map.hasFeatureAtPixel(mapManager.map.getEventPixel(e.originalEvent))) return false;        }        //returnHome check        returnHome.removeReturnHome();        let lineType = new ol.geom.LineString([0,0]);        let waypointType = new ol.geom.Point({});        let seq = waypoint.getObjCnt("name","waypoint") + 1;        let markerText = waypoint.getObjCnt("type","marker");        let prev;        let lastSeq= 1;        let waypointList = waypoint.getObjList("name","waypoint").map((data) => {            return data.get("seq");        });        prev= waypoint.getObjByNum("name", "takeOff", "seq",0);        if(waypointList.length != 0) {            lastSeq = Math.max(...waypointList);            prev = waypoint.getObjByNum("name", "waypoint", "seq",lastSeq);        }        let startCoordinates = prev.getGeometry().getCoordinates();        let endCoordinates = e.coordinate;        let lineStyle = waypoint.lineStyle();        waypointType.setCoordinates(endCoordinates);        let style = waypoint.setIconStyle(markerText + 1);        lineType.setCoordinates([startCoordinates, endCoordinates]);        let lineFeature = waypoint.setFeature(lineType, lineStyle);        let waypointFeature = waypoint.setFeature(waypointType, style);        waypointFeature.set("seq", seq);        waypointFeature.set("name","waypoint");        waypointFeature.set("type","marker");        lineFeature.set("seq", seq);        lineFeature.set("name","line");        if(e.missionName == "loi") {            waypointFeature.set("subName", "loi");            waypointFeature.setStyle(loi.setIconStyle("L"));        }        let missionNo = waypoint.getObjCnt("type", "marker")-1;        waypointFeature.set("missionNo", missionNo);        let midPoint = lineType.getFlatMidpoint();        waypoint.createPlus(midPoint, seq);        waypoint.createPopup(e, missionNo);        return "success";    };    waypoint.createPopup = (e, seq)=> {        // now        //let seq = waypoint.getObjCnt("type", "marker") - 1;        let coordinate = e.coordinate;        let missionName = e.missionName;        if(!missionName) {            missionName = "waypoint";        }        //select box number        let routeTitle= createPopup.createTitle(seq + 1, missionName);        let routeToggle= createPopup.createToggle(missionName);        let routeSet = createPopup.createRouteSet(seq);        routeSet.append(routeTitle, routeToggle);        //add delete btn event        createPopup.addDeleteBtnEvent(routeSet);        let popup= createPopup.getPopupElement();        popup.append(routeSet);        let selectBox = routeTitle.querySelector(".selectBox");        new CustomSelectBox(selectBox);        createPopup.setXY(routeSet, coordinate);    };    //plus marker 생성    waypoint.createPlus = function(coordinates,waypointSeq){        let plusType = new ol.geom.Point({});        let parentText = waypointSeq;        let midPoint= coordinates;        plusType.setCoordinates(midPoint)        let midPointStyle = new ol.style.Style({            image: new ol.style.Icon({                src: "/images/test/mission_black.png",            }),            text: new ol.style.Text({                font: 'bold 20px bold',                fill: new ol.style.Fill({ color: 'white' }),                text: "╉",            }),            zIndex: 100        })        if(waypoint.getObjCnt("type","plus") == 1) {            let feature = waypoint.getObjList("type","plus");            feature[0].setGeometry(plusType);            feature[0].set("seq", parentText);            feature[0].set("missionNo", mission.getObjByNum("name","waypoint", "seq" , parentText).get("missionNo"));            return false;        }        let plusFeature =  waypoint.setFeature(plusType, midPointStyle);        plusFeature.set("seq", parentText);        plusFeature.set("name", "plusToWaypoint");        plusFeature.set("type", "plus");        plusFeature.set("missionNo",parentText );    };    waypoint.plusToWaypoint= (feature)=> {        //plus marker 에 바로 위 seq 정보        let parentSeq = feature.get("seq");        //plus marker set text and style        let missionNo= feature.get("missionNo");        waypoint.getObjList("type","marker").map((data) => {            let seq = data.get("missionNo");            if(seq >= missionNo) {                data.set("missionNo",seq + 1);            }            return data;        });        feature.set("missionNo",missionNo);        let style = waypoint.setIconStyle(feature.get("missionNo") + 1);        feature.setStyle(style);        // marker seq + 1        // marker text + 1        waypoint.getObjList("type","marker").map((data) => {            let seq = data.get("seq");            if(seq >= parentSeq) {                data.set("seq",seq + 1);                //marker text == seq + 2                if(data.get("name") == "waypoint") {                    let textNumber = Number.parseInt(data.getStyle().getText().getText());                    if(Number.isNaN(textNumber)){                        return false;                    }                    return data.setStyle(waypoint.setIconStyle(textNumber + 1));                }            }            return data;        });        //plus feature change        feature.set("seq", parentSeq);        feature.set("name","waypoint");        feature.set("type","marker");        // prev line 의 set start line (now plus marker prev waypoint)        let prevLineCoordi = parentSeq == 1 ? waypoint.getObjList("name","takeOff")[0].getGeometry().getCoordinates() :            waypoint.getObjByNum("name","waypoint","seq",parentSeq - 1).getGeometry().getCoordinates();        // get prev line obj        let prevLineObj = waypoint.getObjByNum("name","line","seq",parentSeq);        prevLineObj.getGeometry().setCoordinates([prevLineCoordi, feature.getGeometry().getCoordinates()]);        // create plus marker        let midPoint = prevLineObj.getGeometry().getFlatMidpoint();        waypoint.createPlus(midPoint, parentSeq);        // create nextLine        let lineType = new ol.geom.LineString([0,0]);        let lineStyle = waypoint.lineStyle();        let nextLineSeq = parentSeq + 1;        let startCoordinates = feature.getGeometry().getCoordinates();        // next waypoint feature info        let endCoordinates = waypoint.getObjByNum("name","waypoint","seq",parentSeq + 1).getGeometry().getCoordinates();        lineType.setCoordinates([startCoordinates,endCoordinates]);        let lineFeature = waypoint.setFeature(lineType, lineStyle);        // line seq + 1        waypoint.getObjList("name","line").map((data) => {            let seq = data.get("seq");            if(seq >= nextLineSeq) {                data.set("seq",seq + 1);            }            return data;        });        lineFeature.set("seq", nextLineSeq);        lineFeature.set("name","line");        // popup seq increase        createPopup.routeSetIncre(missionNo);        let obj= {};        obj.coordinate = startCoordinates;        waypoint.createPopup(obj, missionNo);        // routeSet update        let routeSet = common.arr.call(common.getQsAll(".routeSet"));        let routeSetSort = routeSet.sort((a,b) => {return a.dataset.seq -b.dataset.seq});        let popup = createPopup.getPopupElement();        routeSetSort.forEach(el => {            popup.append(el);        });    };    waypoint.removeMission= (seq, name) => {        seq = Number.parseInt(seq);        //missionNo 로 조회        let feature= waypoint.getObjByNum("name",name ,"missionNo", seq);                // line 은 waypoint seq로 조회        let lineSeq= feature.get("seq");        let lineObj= waypoint.getObjByNum("name", "line", "seq", lineSeq);        let nextLineObj= waypoint.getObjByNum("name", "line", "seq", lineSeq+1);        let missionNo= feature.get("missionNo");        waypoint.removeFeature(mission.layer, feature);        let prevObj        if(lineSeq-1 == "0") {            prevObj = waypoint.getObjList("name", "takeOff")[0];        } else {            prevObj = waypoint.getObjByNum("name",name ,"seq", lineSeq -1);        }        let prevCoordi= prevObj.getGeometry().getCoordinates();        let nextObj= waypoint.getObjByNum("name",name ,"seq", lineSeq +1);        if(nextObj != undefined) {            let nextObjCoordi= nextObj.getGeometry().getCoordinates();            nextLineObj.getGeometry().setCoordinates([prevCoordi, nextObjCoordi]);        }        waypoint.removeFeature(mission.layer, lineObj);        if(waypoint.getObjCnt("type", "plus")) {            waypoint.removeFeature(mission.layer, waypoint.getObjList("type","plus")[0]);        }        let lineList= waypoint.getObjList("name", "line");        lineList.map((data) => {            let no= data.get("seq");            if(no > lineSeq) {                data.set("seq", no - 1);            }            return data;        });        // waypoint seq 최신화        //waypoint.updateIconTextNumber(lineSeq);        let waypointList= waypoint.getObjList("name", "waypoint");        waypointList.map((data) => {            let no= data.get("seq");            if(no > lineSeq) {                let textNumber = Number.parseInt(data.getStyle().getText().getText());                if(!Number.isNaN(textNumber)) {                    data.setStyle(waypoint.setIconStyle(textNumber -1 ));                }                data.set("seq", no - 1);            }            return data;        });        waypoint.decreaseMissionList(missionNo);    };    waypoint.translatestart= (e) => {        let feature= e.features.getArray()[0];        let seq = feature.get("seq");        if(seq - 1 == 0) {            waypoint.prevMarkerObj = waypoint.getObjByNum("name","takeOff", "seq",0);        } else {            waypoint.prevMarkerObj = waypoint.getObjByNum("name","waypoint", "seq",seq - 1);        }        waypoint.nextMarkerObj = waypoint.getObjByNum("name","waypoint", "seq",seq + 1);        waypoint.prevLineObj = waypoint.getObjByNum("name","line", "seq", seq);        waypoint.nextLineObj = waypoint.getObjByNum("name","line", "seq",seq + 1);        waypoint.prevPlusObj = waypoint.getObjList("type","plus")[0];    };    waypoint.translating= (e) => {        let feature = e.features.getArray()[0];        let popupNo = feature.get("missionNo");        const routeSet = common.getQs(`.routeSet[data-seq='${popupNo}']`);        createPopup.setXY(routeSet, e.coordinate);        waypoint.prevLineObj.getGeometry().setCoordinates([waypoint.prevMarkerObj.getGeometry().getCoordinates(),e.coordinate])        waypoint.prevPlusObj.getGeometry().setCoordinates(waypoint.prevLineObj.getGeometry().getFlatMidpoint());        if(waypoint.nextMarkerObj != null) {            waypoint.nextLineObj.getGeometry().setCoordinates([waypoint.nextMarkerObj.getGeometry().getCoordinates(),e.coordinate])        } else if(mission.getObjList("name", "return")[0] != undefined) {            let line= mission.getObjList("name", "return")[0];            let homeObj= waypoint.getObjByNum("name", "takeOff", "seq",0);            line.getGeometry().setCoordinates([homeObj.getGeometry().getCoordinates(),e.coordinate]);        }    };    waypoint.translateend= (e) => {        mapManager.map.removeInteraction(waypoint.translate);    };    waypoint.lineStyle= () => {        let style= new ol.style.Style({            fill: new ol.style.Fill({                color: 'rgba(255, 255, 255, 0.2)',            }),            stroke: new ol.style.Stroke({                color: 'black',                width: 5,            })        });        return style;    };const returnHome = Object.create(mission);    returnHome.init= () => {    };    returnHome.initEvent= () => {        let returnBtn= common.getQs("#return_btn");        returnBtn.addEventListener("click", returnHome.createReturn);    };    returnHome.createReturn= (e) => {        if(returnHome.getObjCnt("name", "return") == 1) {            //alert("이미 생성되어 있습니다.");            return false;        }        let max= returnHome.getObjMax("name", "waypoint");        if(max < 0) {            alert("미션을 입력하세요");            return false;        };        let lastObj= returnHome.getObjByNum("name", "waypoint", "seq",max);        let homeObj= returnHome.getObjByNum("name", "takeOff", "seq",0);        let lineType= new ol.geom.LineString([0,0]);        let lineStyle= returnHome.lineStyle();        let lineMax= returnHome.getObjMax("name", "line");        if(lineMax < 0) {            alert("미션을 입력하세요");            return false;        };        lineType.setCoordinates([lastObj.getGeometry().getCoordinates(), homeObj.getGeometry().getCoordinates()]);        let lineFeature= returnHome.setFeature(lineType, lineStyle);        lineFeature.set("seq", lineMax+ 1);        lineFeature.set("name", "return");        //lineFeature.set("type", "return");        lineFeature.set("missionNo", returnHome.getObjCnt("type", "marker"));        lineFeature.set("type", "marker");        returnHome.createPopup();    };    returnHome.createPopup = function() {        let seq = returnHome.getObjCnt("type", "marker");        let routeTitle= createPopup.createTitle(seq, "return", "귀환");        //let routeToggle= createPopup.createToggle("return");        let routeSet = createPopup.createRouteSet(seq-1);        routeSet.append(routeTitle);        //add delete btn event        createPopup.addDeleteBtnEvent(routeSet);        routeSet.querySelector(".displayBtn").classList.add("return");        let popup= createPopup.getPopupElement();        popup.append(routeSet);    };    returnHome.lineStyle= () => {        let style= new ol.style.Style({            fill: new ol.style.Fill({                color: "red",            }),            stroke: new ol.style.Stroke({                color: "red",                width: 5,            })        });        return style;    };    returnHome.removeReturnHome = function() {        if(returnHome.getObjCnt("name", "return") == 1) {            let returnFeature = roi.getObjList("name", "return")[0];            const routeSet = common.getQs(`.routeSet[data-seq='${returnFeature.get("missionNo")}']`);            mission.removeFeature(mission.layer, returnFeature);            createPopup.removePopup(routeSet.dataset.seq ,routeSet);        }    };const roi = Object.create(mission);    roi.init= () => {    };    roi.initEvent= () => {        let roiBtn = common.getQs("#roi_btn");        // 아이콘 클릭 이벤트        mapManager.setMapEventListener("click", roi.mapClickListener);        // 아이콘 클릭 이벤트        roiBtn.addEventListener("click", function(e) {            // 버튼 초기화            roi.btnActiveSet(roiBtn);            // passive            if(roiBtn.getAttribute("class")== "active") {                roiBtn.setAttribute("class", "");                mapManager.removeMapEventListener("click", roi.createRoi);                // active            } else {                roiBtn.setAttribute("class", "active");                mapManager.setMapEventListener("click", roi.createRoi);            }        });    };    roi.mapClickListener=(e) => {        mapManager.map.forEachFeatureAtPixel(e.pixel, function(f) {            let feature= f;            if(feature.get("name") == "roi") {                roi.checkInteraction("translate");                let translate = roi.getTranslate(feature);                roi.setTranslateCollectionEvent("translatestart",roi.translatestart);                roi.setTranslateCollectionEvent("translating",roi.translating);                roi.setTranslateCollectionEvent("translateend",roi.translateend);                translate.set("type","translate");                mapManager.map.addInteraction(translate);            }        }); // forEachFeatureAtPixel    }    roi.createRoi= (e) => {        if(!roi.getObjCnt("name", "takeOff")) {            alert("이륙 미션을 생성해주세요");            return false;        }        //not click        if(e.originalEvent != undefined) {            // pixel has feature => true ? return false : return true; //            if(mapManager.map.hasFeatureAtPixel(mapManager.map.getEventPixel(e.originalEvent))) return false;        }        //returnHome check        returnHome.removeReturnHome();        let coordinates= e.coordinate;        let roiType= new ol.geom.Point({});        let seq= roi.getObjCnt("type","marker");        let style= roi.setIconStyle("R");        roiType.setCoordinates(coordinates);        let roiFeature= roi.setFeature(roiType, style);        roiFeature.set("seq", seq);        roiFeature.set("name", "roi");        roiFeature.set("type", "marker");        roiFeature.set("missionNo", seq);        roi.createPopup(e.coordinate);    };    roi.createPopup = (e)=> {        // now        let seq = roi.getObjCnt("type", "marker") - 1;        let obj = e;        //select box number        let routeTitle= createPopup.createTitle(seq + 1, "roi");        let routeToggle= createPopup.createToggle("roi");        let routeSet = createPopup.createRouteSet(seq);        routeSet.append(routeTitle, routeToggle);        //add delete btn event        createPopup.addDeleteBtnEvent(routeSet);        let popup= createPopup.getPopupElement();        popup.append(routeSet);        let selectBox = routeTitle.querySelector(".selectBox");        new CustomSelectBox(selectBox);        createPopup.setXY(routeSet, obj);    };    roi.removeMission = (seq, name) => {        seq = Number.parseInt(seq);        let feature= waypoint.getObjByNum("name",name ,"missionNo", seq);        let missionNo = seq;        roi.removeFeature(mission.layer, feature);        roi.decreaseMissionList(missionNo);        roi.updateIconTextNumber(missionNo);    };    roi.translatestart=(e) => {    };    roi.translating=(e) => {        let feature= e.features.getArray()[0];        feature.getGeometry().setCoordinates(e.coordinate);        let popupNo = feature.get("missionNo");        const routeSet = common.getQs(`.routeSet[data-seq='${popupNo}']`);        createPopup.setXY(routeSet, e.coordinate);    };    roi.translateend=(e) => {        mapManager.map.removeInteraction(roi.translate);    };    const loi = Object.create(mission);    loi.init = () => {    };    loi.initEvent = () => {    };function CustomSelectBox(selector) {    this.selectBox = null,        this.select = null,        this.list = null,        this.listLi = null;    CustomSelectBox.prototype.init = function(selector) {        this.selectBox = selector;        this.select = this.selectBox.querySelector(`.select`);        this.list = this.selectBox.querySelector(`.list`);        this.listLi = common.arr.call(this.selectBox.querySelectorAll(`.list li`));    },        CustomSelectBox.prototype.initEvent = function(e) {            let that = this;            this.select.addEventListener("click", function(e) {                that.listOn(this);            });            this.listLi.map((data) => {                data.addEventListener("click", function(e) {                    that.listSelect(this);                });            })            window.document.addEventListener("click", function(e) {                that.listOff(e.target);            });        },        CustomSelectBox.prototype.listOn = function(e) {            this.selectBox.classList.toggle("on");            if(this.selectBox.classList.contains("on")) {                this.list.style.display = "block";            } else {                this.list.style.display = "none";            }        },        CustomSelectBox.prototype.listSelect = function(target) {            this.listLi.map((data) => {                data.classList.remove("selected");            });            target.className = "selected";            this.selectBox.classList.remove("on");            this.select.innerText = "";            this.select.append(target.textContent);            this.list.style.display = "none";        },        CustomSelectBox.prototype.listOff = function(target) {            let check = target === this.select;            if(!check && this.selectBox.classList.contains("on")) {                this.selectBox.classList.remove("on");                this.list.style.display = "none";            }        }    this.init(selector);    this.initEvent();}