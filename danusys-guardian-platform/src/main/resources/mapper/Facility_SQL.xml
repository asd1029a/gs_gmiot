<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="facility">
	<select id="selectFcltSList" parameterType="map" resultType="com.danusys.guardian.common.util.EgovMap">
		SELECT * FROM(
			SELECT 
				ROW_NUMBER() OVER(ORDER BY a.FCLT_ID ASC)::text AS "rnum",
				a.FCLT_ID as "fcltId",
				a.FCLT_NM as "fcltNm",
				a.FCLT_KND_CD as "fcltKndCd",
				(SELECT d.DE_CD_NM FROM GROUP_CD g, DETAIL_CD d WHERE g.GRP_CD = d.GRP_CD AND d.DE_CD = a.FCLT_KND_CD) as "fcltKndNm",
				a.MGMT_NO as "mgmtNo",
				a.ADDRESS as "address",
				a.FCLT_SH as "fcltSh",
				a.STATE as "stateCd",
				CASE a.STATE
					WHEN '0' THEN '연결'
					WHEN '1' THEN '미연결'
				END as "stateNm",
				a.PURPOSE as "fcltPurposeCd",
				(SELECT g.DE_CD_NM FROM DETAIL_CD g WHERE GRP_CD = 'FCLT_PURPOSE' AND g.DE_CD = a.PURPOSE) as "fcltPuposeNm",
				SPLIT_PART(a.FCLT_ID,'_',1) as "nodeId",
				a.FCLT_PTZ as "cctvAgYn",
				a.LONGITUDE::text as "lon",
				a.LATITUDE::text as "lat",
				a.VMS_SVR_IP as "vmsSvrIp",
				a.INSERT_DATE as "insertDate",
				COALESCE(c.PRESET_NO,'0') AS "presetNo"
			<if test="lat != null and lat != '' and sameCctv != true"> 
				,ST_DISTANCE(
				ST_GEOMFROMTEXT('POINT(' ||#{lon} ||' '||#{lat}|| ')',4326),
				ST_GEOMFROMTEXT('POINT(' ||a.LONGITUDE ||' '||a.LATITUDE || ')',4326)
				) AS "distance"
			</if>
			FROM 
				FACILITY_S a INNER JOIN USER_FACILITY f
			ON 
				(a.FCLT_ID = f.FCLT_ID)
			LEFT OUTER JOIN CCTV_PRESET c
			ON 
				(a.FCLT_ID = c.CCTV_ID)
				AND a.FCLT_PTZ = '0'
			WHERE 1=1
			AND f.USER_ID = #{userId}
			<if test="mapBound != null and mapBound != ''">
			AND ST_WITHIN(ST_GEOMFROMTEXT('POINT('||a.LONGITUDE||' '||a.LATITUDE||')'),ST_GEOMFROMTEXT('POLYGON(('||#{mapBound}||'))')) = true
			</if>
			<choose>
	            <when test="fcltSpace != null">
					<foreach collection="fcltSpace" item="item" index="index" separator="," open="AND a.AREA_CD::text IN (" close=")">
					#{item}
					</foreach>
				</when>
	        </choose>
			<choose>
	            <when test="purposeSpace != null">
					<foreach collection="purposeSpace" item="item" index="index" separator="," open="AND a.PURPOSE IN (" close=")">
					#{item}
					</foreach>
				</when>
	        </choose>
			<if test="state != null and state != ''">
				AND a.STATE = #{state}
			</if>
	        <if test="sameCctv != null and sameCctv != ''">
				AND a.LATITUDE::text = #{sameLat}
				AND a.LONGITUDE::text = #{sameLon}
			</if>
			<if test="pageKind != 'manage'">
				AND a.FCLT_KND_CD='CCTV'
				AND a.FCLT_HEAD='1'
			</if>
			<if test="searchTxt != null and searchTxt != ''">
				AND a.FCLT_NM || a.MGMT_NO like '%' || #{searchTxt} || '%'
			</if>
			<if test="fcltId != null and fcltId != ''">
				AND a.FCLT_ID = '${fcltId}'
			</if>
			<if test="lonDefind == 'lonDefind'">
				AND a.LONGITUDE::text = '0'
			</if>
			<if test="fcltAgCd != null and fcltAgCd != ''">
				AND a.FCLT_PTZ = #{fcltAgCd}
			</if>
		) a
		WHERE 1=1
		<if test='recordCountPerPage != -1'>
		<![CDATA[
		AND a."rnum" > #{firstIndex}
		AND a."rnum" <= #{lastIndex}
		]]>
		</if>
		<if test="lat != null and lat != '' and samePosition != true"> 
		<![CDATA[
			AND a."rnum" < 6
		]]>
		</if>
		<if test="pageKind == 'event'">
		<![CDATA[
			AND a."rnum" <= 1
		]]>
		</if>
		<if test="pageKind == 'circular'">
		<![CDATA[
			AND a."rnum" <= 25
		]]>
		</if>
		ORDER BY a."rnum"::integer
	</select>
	
	
	<select id="selectFcltSListCnt" parameterType="map" resultType="String">
		SELECT COUNT(*) total 
		FROM(
			SELECT 
				ROW_NUMBER() OVER(ORDER BY a.FCLT_ID ASC) AS "rnum",
				a.FCLT_ID as "fcltId",
				a.FCLT_NM as "fcltNm",
				a.FCLT_KND_CD as "fcltKndCd",
				(SELECT d.DE_CD_NM FROM GROUP_CD g, DETAIL_CD d WHERE g.GRP_CD = d.GRP_CD AND d.DE_CD = a.FCLT_KND_CD) as "fcltKndNm",
				a.MGMT_NO as "mgmtNo",
				a.ADDRESS as "address",
				a.FCLT_SH as "fcltSh",
				a.STATE as "stateCd",
				CASE a.STATE
					WHEN '0' THEN '연결'
					WHEN '1' THEN '미연결'
				END as "stateNm",
				a.PURPOSE as "fcltPurposeCd",
				(SELECT g.DE_CD_NM FROM DETAIL_CD g WHERE GRP_CD = 'FCLT_PURPOSE' AND g.DE_CD = a.PURPOSE) as "fcltPuposeNm",
				SPLIT_PART(a.FCLT_ID,'_',1) as "nodeId",
				a.FCLT_PTZ as "cctvAgYn",
				a.LONGITUDE::text as "lon",
				a.LATITUDE::text as "lat",
				a.VMS_SVR_IP as "vmsSvrIp",
				a.INSERT_DATE as "insertDate",
				COALESCE(c.PRESET_NO,'0') AS "presetNo"
			<if test="lat != null and lat != '' and sameCctv != true"> 
				,ST_DISTANCE(
				ST_GEOMFROMTEXT('POINT(' ||#{lon} ||' '||#{lat}|| ')',4326),
				ST_GEOMFROMTEXT('POINT(' ||a.LONGITUDE ||' '||a.LATITUDE || ')',4326)
				) AS "distance"
			</if>
			FROM 
				FACILITY_S a INNER JOIN USER_FACILITY f
			ON 
				(a.FCLT_ID = f.FCLT_ID)
			LEFT OUTER JOIN CCTV_PRESET c
			ON 
				(a.FCLT_ID = c.CCTV_ID)
				AND a.FCLT_PTZ = '0'
			WHERE 1=1
			AND f.USER_ID = #{userId}
			<if test="mapBound != null and mapBound != ''">
			AND ST_WITHIN(ST_GEOMFROMTEXT('POINT('||a.LONGITUDE||' '||a.LATITUDE||')'),ST_GEOMFROMTEXT('POLYGON(('||#{mapBound}||'))')) = true
			</if>
			<choose>
	            <when test="fcltSpace != null">
					<foreach collection="fcltSpace" item="item" index="index" separator="," open="AND a.AREA_CD IN (" close=")">
					#{item}
					</foreach>
				</when>
	        </choose>
			<choose>
	            <when test="purposeSpace != null">
					<foreach collection="purposeSpace" item="item" index="index" separator="," open="AND a.PURPOSE IN (" close=")">
					#{item}
					</foreach>
				</when>
	        </choose>
			<if test="sameCctv != null and samePosition != ''">
				AND a.LATITUDE::text = #{sameLat}
				AND a.LONGITUDE::text = #{sameLon}
			</if>
			<if test="pageKind != 'manage'">
				AND a.FCLT_KND_CD='CCTV'
				AND a.FCLT_HEAD='1'
			</if>
			<if test="searchTxt != null and searchTxt != ''">
				AND a.FCLT_NM || ' ' || a.MGMT_NO like '%' || #{searchTxt} || '%'
			</if>
			<if test="lonDefind == 'lonDefind'">
				AND a.LONGITUDE::text = '0'
			</if>
			<if test="fcltAgCd != null and fcltAgCd != ''">
				AND a.FCLT_PTZ = #{fcltAgCd}
			</if>
		) a
		WHERE 1=1
		<if test="lat != null and lat != '' and samePosition != true"> 
		<![CDATA[
			AND a."rnum" < 6
		]]>
		</if>
		<if test="pageKind == 'event'">
		<![CDATA[
			AND a."rnum" <= 1
		]]>
		</if>
		<if test="pageKind == 'circular'">
		<![CDATA[
			AND a."rnum" <= 25
		]]>
		</if>
	</select>
	
	<select id="castMntr" parameterType="map" resultType="HashMap">
		SELECT * FROM (
			SELECT 
				ROW_NUMBER() OVER(ORDER BY a.INSERT_DATE DESC) AS "rnum",
				a.FCLT_ID as "fcltId",
				a.FCLT_NM as "fcltNm",
				a.FCLT_KND_CD as "fcltKndCd",
				(SELECT d.DE_CD_NM FROM GROUP_CD g, DETAIL_CD d WHERE g.GRP_CD = d.GRP_CD AND d.DE_CD = a.FCLT_KND_CD) as "fcltKndNm",
				a.MGMT_NO as "mgmtNo",
				a.ADDRESS as "address",
				a.STATE as "stateCd",
				CASE a.STATE
					WHEN '0' THEN '연결'
					WHEN '1' THEN '미연결'
				END as "stateNm",
				a.PURPOSE as "fcltPurposeCd",
				(SELECT g.DE_CD_NM FROM DETAIL_CD g WHERE GRP_CD = 'FCLT_PURPOSE' AND g.DE_CD = a.PURPOSE) as "fcltPuposeNm",
				SPLIT_PART(a.FCLT_ID,'_',1) as "nodeId",
				a.FCLT_PTZ as "cctvAgYn",
				a.LONGITUDE::text as "lon",
				a.LATITUDE::text as "lat",
				a.FCLT_SH as "fcltSh",
				a.VMS_SVR_IP as "vmsSvrIp",
				a.INSERT_DATE as "insertDate"
				,ST_DISTANCE(
				ST_GEOMFROMTEXT('POINT(' ||#{lon} ||' '||#{lat}|| ')',4326),
				ST_GEOMFROMTEXT('POINT(' ||a.LONGITUDE ||' '||a.LATITUDE || ')',4326)
				) AS "distance"
			FROM FACILITY_S a
			RIGHT OUTER JOIN USER_FACILITY f
        	ON(a.FCLT_ID = f.FCLT_ID)
        	WHERE 1=1
        	AND f.USER_ID = #{userId}
			AND a.FCLT_KND_CD='CCTV'
			AND a.FCLT_HEAD='1'
			AND a.LATITUDE != 0
			<choose>
	            <when test="purposeSpace != null">
					<foreach collection="purposeSpace" item="item" index="index" separator="," open="AND a.PURPOSE IN (" close=")">
					#{item}
					</foreach>
				</when>
	        </choose>
			ORDER BY "distance" ASC
		) a
		WHERE 1=1
		<if test="rowNm != null and rowNm != ''"><![CDATA[
			LIMIT #{rowNm}
		]]></if>
	</select>
	
	<select id="evtCastMntr" parameterType="map" resultType="HashMap">
		SELECT * FROM (
			SELECT 
				ROW_NUMBER() OVER(ORDER BY a.INSERT_DATE DESC) AS "rnum",
				a.FCLT_ID as "fcltId",
				a.FCLT_NM as "fcltNm",
				a.FCLT_KND_CD as "fcltKndCd",
				(SELECT d.DE_CD_NM FROM GROUP_CD g, DETAIL_CD d WHERE g.GRP_CD = d.GRP_CD AND d.DE_CD = a.FCLT_KND_CD) as "fcltKndNm",
				a.MGMT_NO as "mgmtNo",
				a.ADDRESS as "address",
				a.STATE as "stateCd",
				CASE a.STATE
					WHEN '0' THEN '연결'
					WHEN '1' THEN '미연결'
				END as "stateNm",
				a.PURPOSE as "fcltPurposeCd",
				(SELECT g.DE_CD_NM FROM DETAIL_CD g WHERE GRP_CD = 'FCLT_PURPOSE' AND g.DE_CD = a.PURPOSE) as "fcltPuposeNm",
				SPLIT_PART(a.FCLT_ID,'_',1) as "nodeId",
				a.FCLT_PTZ as "cctvAgYn",
				a.LONGITUDE::text as "lon",
				a.LATITUDE::text as "lat",
				a.FCLT_SH as "fcltSh",
				a.VMS_SVR_IP as "vmsSvrIp",
				a.INSERT_DATE as "insertDate"
				,ST_DISTANCE(
				ST_GEOMFROMTEXT('POINT(' ||#{lon} ||' '||#{lat}|| ')',4326),
				ST_GEOMFROMTEXT('POINT(' ||a.LONGITUDE ||' '||a.LATITUDE || ')',4326)
				) AS "distance"
			FROM FACILITY_S a
			WHERE 1=1
			AND a.FCLT_KND_CD='CCTV'
			AND a.FCLT_HEAD='1'
			AND a.LATITUDE != 0
			<choose>
	            <when test="purposeSpace != null">
					<foreach collection="purposeSpace" item="item" index="index" separator="," open="AND a.PURPOSE IN (" close=")">
					#{item}
					</foreach>
				</when>
	        </choose>
			ORDER BY "distance" ASC
		) a
		WHERE 1=1
		<if test="rowNm != null and rowNm != ''"><![CDATA[
			LIMIT #{rowNm}
		]]></if>
	</select>
	
	<select id="selectSiteCctvList" parameterType="map" resultType="HashMap">
		SELECT * FROM (
			SELECT 
				ROW_NUMBER() OVER(ORDER BY a.INSERT_DATE DESC) AS "rnum",
				a.FCLT_ID as "fcltId",
				a.FCLT_NM as "fcltNm",
				a.FCLT_KND_CD as "fcltKndCd",
				(SELECT d.DE_CD_NM FROM GROUP_CD g, DETAIL_CD d WHERE g.GRP_CD = d.GRP_CD AND d.DE_CD = a.FCLT_KND_CD) as "fcltKndNm",
				a.MGMT_NO as "mgmtNo",
				a.ADDRESS as "address",
				a.STATE as "stateCd",
				CASE a.STATE
					WHEN '0' THEN '연결'
					WHEN '1' THEN '미연결'
				END as "stateNm",
				a.PURPOSE as "fcltPurposeCd",
				(SELECT g.DE_CD_NM FROM DETAIL_CD g WHERE GRP_CD = 'FCLT_PURPOSE' AND g.DE_CD = a.PURPOSE) as "fcltPuposeNm",
				SPLIT_PART(a.FCLT_ID,'_',1) as "nodeId",
				a.FCLT_PTZ as "cctvAgYn",
				a.LONGITUDE::text as "lon",
				a.LATITUDE::text as "lat",
				a.FCLT_SH as "fcltSh",
				a.VMS_SVR_IP as "vmsSvrIp",
				a.INSERT_DATE as "insertDate"
			FROM FACILITY_S a
			WHERE 1=1
			AND a.FCLT_KND_CD='CCTV'
			<choose>
	            <when test="purposeSpace != null">
					<foreach collection="purposeSpace" item="item" index="index" separator="," open="AND a.PURPOSE IN (" close=")">
					#{item}
					</foreach>
				</when>
	        </choose>
			<if test="sameLat != null and sameLat != ''">
				AND a.LATITUDE::text = #{sameLat}
				AND a.LONGITUDE::text = #{sameLon}
			</if>
			ORDER BY a.FCLT_ID ASC
		) a
		WHERE 1=1
	</select>
	
	
	<select id="selectCirclrGrpList" parameterType="map" resultType="HashMap">
		SELECT *
		FROM (
			SELECT ROW_NUMBER() OVER(ORDER BY a.NO DESC)::text AS "rnum"
				 , a.NO::text AS "no"
				 , a.MONITOR_AREA AS "monitorArea"
				 , a.MANAGER AS "manager"
				 , a.INFORMATION AS "information"
				 , a.CCTV_ID_1 AS "cctvId1"
				 , a.CCTV_ID_2 AS "cctvId2"
				 , a.CCTV_ID_3 AS "cctvId3"
				 , a.CCTV_ID_4 AS "cctvId4"
				 , a.CCTV_ID_5 AS "cctvId5"
				 , a.CCTV_ID_6 AS "cctvId6"
				 , a.CCTV_ID_7 AS "cctvId7"
				 , a.CCTV_ID_8 AS "cctvId8"
				 , a.CCTV_ID_9 AS "cctvId9"
				 , a.CCTV_ID_NAME_1 AS "cctvName1"
				 , a.CCTV_ID_NAME_2 AS "cctvName2"
				 , a.CCTV_ID_NAME_3 AS "cctvName3"
				 , a.CCTV_ID_NAME_4 AS "cctvName4"
				 , a.CCTV_ID_NAME_5 AS "cctvName5"
				 , a.CCTV_ID_NAME_6 AS "cctvName6"
				 , a.CCTV_ID_NAME_7 AS "cctvName7"
				 , a.CCTV_ID_NAME_8 AS "cctvName8"
				 , a.CCTV_ID_NAME_9 AS "cctvName9"
			FROM CIRCULAR_GROUP a
			WHERE 1=1
			<if test="totSearch != null and totSearch != ''">
				AND a.MONITOR_AREA||a.MANAGER LIKE '%'||#{totSearch}||'%'
			</if>
		) a
		WHERE 1=1		
		<if test='recordCountPerPage != -1'>
		<![CDATA[
		AND a."rnum" > #{firstIndex}
		AND a."rnum" <= #{lastIndex}
		]]>
		</if>
	</select>
	
	<select id="selectCirclrDtlCctv" parameterType="map" resultType="HashMap">
		<![CDATA[
			SELECT ROW_NUMBER() OVER(ORDER BY a.l ASC) AS "rnum",
				a.cctv AS "cctv",
				a.cctvName AS "cctvName",
				coalesce(f.LONGITUDE::text,'0') AS "lon",
				coalesce(f.LATITUDE::text,'0') AS "lat",
				f.FCLT_ID as "fcltId",
				f.FCLT_NM as "fcltNm",
				SPLIT_PART(f.FCLT_ID,'_',1) as "nodeId",
				f.VMS_SVR_IP as "vmsSvrIp",
				f.FCLT_PTZ as "cctvAgYn",
				f.MGMT_NO as "mgmtNo",
				f.PURPOSE as "fcltPurposeCd",
				(SELECT g.DE_CD_NM FROM DETAIL_CD g WHERE GRP_CD = 'FCLT_PURPOSE' AND g.DE_CD = f.PURPOSE) as "fcltPuposeNm"
			FROM (
					SELECT 
							CASE WHEN l = 1 THEN coalesce(CCTV_ID_1,' ',CCTV_ID_1)
                			WHEN l = 2 THEN coalesce(CCTV_ID_2,' ',CCTV_ID_2)
							WHEN l = 3 THEN coalesce(CCTV_ID_3,' ',CCTV_ID_3)
                            WHEN l = 4 THEN coalesce(CCTV_ID_4,' ',CCTV_ID_4)
                            WHEN l = 5 THEN coalesce(CCTV_ID_5,' ',CCTV_ID_5)
                            WHEN l = 6 THEN coalesce(CCTV_ID_6,' ',CCTV_ID_6)
                            WHEN l = 7 THEN coalesce(CCTV_ID_7,' ',CCTV_ID_7)
                            WHEN l = 8 THEN coalesce(CCTV_ID_8,' ',CCTV_ID_8)
                            WHEN l = 9 THEN coalesce(CCTV_ID_9,' ',CCTV_ID_9) END AS cctv,
						CASE WHEN l = 1 THEN coalesce(CCTV_ID_NAME_1,' ',CCTV_ID_NAME_1)
                 			WHEN l = 2 THEN coalesce(CCTV_ID_NAME_2,' ',CCTV_ID_NAME_2)
                 			WHEN l = 3 THEN coalesce(CCTV_ID_NAME_3,' ',CCTV_ID_NAME_3)
                 			WHEN l = 4 THEN coalesce(CCTV_ID_NAME_4,' ',CCTV_ID_NAME_4)
                 			WHEN l = 5 THEN coalesce(CCTV_ID_NAME_5,' ',CCTV_ID_NAME_5)
                 			WHEN l = 6 THEN coalesce(CCTV_ID_NAME_6,' ',CCTV_ID_NAME_6)
                 			WHEN l = 7 THEN coalesce(CCTV_ID_NAME_7,' ',CCTV_ID_NAME_7)
                 			WHEN l = 8 THEN coalesce(CCTV_ID_NAME_8,' ',CCTV_ID_NAME_8)
                 			WHEN l = 9 THEN coalesce(CCTV_ID_NAME_9,' ',CCTV_ID_NAME_9) END AS cctvName
							,b.l
					FROM CIRCULAR_GROUP a
						,(SELECT GENERATE_SERIES(1,9)::integer AS l) b
					WHERE 1=1
					AND a.NO::text = #{no}
			) a 
			LEFT OUTER JOIN FACILITY_S f
			ON a.cctv = f.FCLT_ID
		]]>
	</select>
	
	<select id="getFacilityPresetTemp" parameterType="map" resultType="HashMap">
		SELECT 
			CCTV_ID AS "cctvId",
			PRESET_NO AS "presetNo",
			PRESET_NAME AS "presetName",
			coalesce(PAN::text,' ') AS "pan",
			coalesce(TILT::text,' ') AS "tilt",
			coalesce(ZOOM::text,' ') AS "zoom",
			coalesce(FOCUS::text,' ') AS "focus",
			CCTV_KND AS "cctvKnd"
		FROM cctv_preset_temp
		WHERE 1=1
		AND CCTV_ID = #{cctvId}
		<if test="presetNo != null and presetNo != ''">
		AND PRESET_NO = #{presetNo}
		</if>
	</select>
	
	<select id="getFacilityPreset" parameterType="map" resultType="HashMap">
		SELECT 
			CCTV_ID AS "cctvId",
			PRESET_NO AS "presetNo",
			PRESET_NAME AS "presetName",
			coalesce(PAN::text,' ') AS "pan",
			coalesce(TILT::text,' ') AS "tilt",
			coalesce(ZOOM::text,' ') AS "zoom",
			coalesce(FOCUS::text,' ') AS "focus",
			CCTV_KND AS "cctvKnd",
			LONGITUDE::text AS "lon",
			LATITUDE::text AS "lat"
		FROM cctv_preset
		WHERE 1=1
		<if test="cctvId != null and cctvId != ''">
			AND CCTV_ID = #{cctvId}
		</if>
		<if test="presetNo != null and presetNo != ''">
			AND SUBSTR(PRESET_NO, -1) = #{presetNo}
		</if>
	</select>
	
	<update id="saveFacilityPreset" parameterType="map">
	 	INSERT INTO CCTV_PRESET
	 	(
	 		CCTV_ID,
			PRESET_NO,
			PRESET_NAME,
			PAN,
			TILT,
			ZOOM,
			FOCUS,
			CCTV_KND,
			LONGITUDE,
			LATITUDE,
			INSERT_DATE
	 	)
	 	VALUES(
	 		#{cctvId},
			#{presetNo},
			#{presetName},
			#{pan},
			#{tilt},
			#{zoom},
			#{focus},
			#{cctvKnd},
			COALESCE(CAST(#{lat} AS DOUBLE PRECISION),0),
			COALESCE(CAST(#{lat} AS DOUBLE PRECISION),0),
			NOW()
	 	)
	 	ON CONFLICT
	 	(CCTV_ID,PRESET_NO)
		DO UPDATE SET
			PRESET_NAME = #{presetName},
			PAN = #{pan},
			TILT =#{tilt},
			ZOOM = #{zoom},
			FOCUS = #{focus},
			CCTV_KND = #{cctvKnd},
			LONGITUDE = CAST(#{lon} AS DOUBLE PRECISION),
			LATITUDE = CAST(#{lat} AS DOUBLE PRECISION),
			UPDATE_DATE = NOW()
	</update>
	
	<update id="saveCircularGroup" parameterType="map">
		INSERT INTO CIRCULAR_GROUP
		(
			NO,
			MONITOR_AREA,
			MANAGER,
			INFORMATION,
			CCTV_ID_1,
			CCTV_ID_2,
			CCTV_ID_3,
			CCTV_ID_4,
			CCTV_ID_5,
			CCTV_ID_6,
			CCTV_ID_7,
			CCTV_ID_8,
			CCTV_ID_9,
			CCTV_ID_NAME_1,
			CCTV_ID_NAME_2,
			CCTV_ID_NAME_3,
			CCTV_ID_NAME_4,
			CCTV_ID_NAME_5,
			CCTV_ID_NAME_6,
			CCTV_ID_NAME_7,
			CCTV_ID_NAME_8,
			CCTV_ID_NAME_9,
			INSERT_DATE
		) VALUES (
			( 
			SELECT CASE WHEN #{no}::integer IS NULL 
			THEN NEXTVAL('circular_seq')
			ELSE #{no}::integer END::integer
			),
			#{monitorArea},
			#{manager},
			#{information},
			#{cctvId1},
			#{cctvId2},
			#{cctvId3},
			#{cctvId4},
			#{cctvId5},
			#{cctvId6},
			#{cctvId7},
			#{cctvId8},
			#{cctvId9},
			#{cctvName1},
			#{cctvName2},
			#{cctvName3},
			#{cctvName4},
			#{cctvName5},
			#{cctvName6},
			#{cctvName7},
			#{cctvName8},
			#{cctvName9},
			NOW()
		)
		ON CONFLICT
		(NO)
		DO UPDATE SET
			MONITOR_AREA = #{monitorArea},
			MANAGER = #{manager},
			INFORMATION = #{information},
			CCTV_ID_1 = #{cctvId1},
			CCTV_ID_2 = #{cctvId2},
			CCTV_ID_3 = #{cctvId3},
			CCTV_ID_4 = #{cctvId4},
			CCTV_ID_5 = #{cctvId5},
			CCTV_ID_6 = #{cctvId6},
			CCTV_ID_7 = #{cctvId7},
			CCTV_ID_8 = #{cctvId8},
			CCTV_ID_9 = #{cctvId9},
			CCTV_ID_NAME_1 = #{cctvName1},
			CCTV_ID_NAME_2 = #{cctvName2},
			CCTV_ID_NAME_3 = #{cctvName3},
			CCTV_ID_NAME_4 = #{cctvName4},
			CCTV_ID_NAME_5 = #{cctvName5},
			CCTV_ID_NAME_6 = #{cctvName6},
			CCTV_ID_NAME_7 = #{cctvName7},
			CCTV_ID_NAME_8 = #{cctvName8},
			CCTV_ID_NAME_9 = #{cctvName9},
			UPDATE_DATE = NOW()
	</update>
	
	<delete id="deleteCircularGroup" parameterType="map">
		<![CDATA[
		DELETE
		FROM circular_group
		WHERE 1=1
		AND NO::text =  #{no};
		]]>
	</delete>
	
	<insert id="insertCctvCtrlLog" parameterType="map">
		<![CDATA[
			INSERT INTO CCTV_CTRL_LOG (
				FCLT_ID,
				FCLT_NM,
				TYPE,
				KINDS,
				USER_ID,
				INSERT_DATE
			)
			SELECT
				#{fcltId},
				a.FCLT_NM,
				#{type},
				#{kinds},
				#{userId},
				NOW()
			FROM FACILITY_S a
			WHERE 1=1
			AND a.FCLT_ID = #{fcltId};
		]]>
	</insert>
	
	<select id="selectCctvPreset" parameterType="map" resultType="HashMap">
		SELECT *
		FROM (
				SELECT d.PRESET_NO as "presetNo"
					 , d.PAN as "pan"
					 , d.TILT as "tilt"
					 , d.ZOOM as "zoom"
					 , d.FOCUS as "focus"
					 , d.CCTV_ID as "fcltId"
					 , m.FCLT_PTZ AS "cctvAgYn"
					 , m.VMS_SVR_IP AS "vmsSvrIp"
					 , m."nodeId" AS "nodeId"
					 , m.LONGITUDE::text as "baseLon"
					 , m.LATITUDE::text as "baseLat"
					 , RANK() OVER (PARTITION BY d.CCTV_ID ORDER BY
						ST_DISTANCE(
							ST_GEOMFROMTEXT('POINT(' ||#{lon} ||' '||#{lat}|| ')',4326),
							ST_GEOMFROMTEXT('POINT(' ||d.LONGITUDE ||' '||d.LATITUDE || ')',4326))) AS "rk1"
				FROM (
						SELECT CASE FCLT_PTZ WHEN '1' THEN FCLT_ID
								ELSE (
										SELECT dd.CCTV_ID
										FROM (
												SELECT b.CCTV_ID,
														RANK() OVER(
														ORDER BY
														ST_DISTANCE(
														ST_GEOMFROMTEXT('POINT(' ||#{lon} ||' '||#{lat}|| ')',4326),
														ST_GEOMFROMTEXT('POINT(' ||b.LONGITUDE ||' '||b.LATITUDE || ')',4326)
														)) AS "rk"
												FROM CCTV_PRESET b
													, (SELECT FCLT_ID FROM  FACILITY_S f WHERE f.LONGITUDE = c.LONGITUDE AND f.LATITUDE = c.LATITUDE) f
												WHERE b.CCTV_ID = f.FCLT_ID
										) dd
										WHERE dd.rk = 1
								) END AS "baseId"
							 , c.FCLT_PTZ
							 , c.VMS_SVR_IP
							 , SPLIT_PART(c.FCLT_ID,'_',1) as "nodeId"
							 , c.LONGITUDE
							 , c.LATITUDE
						FROM FACILITY_S c
						WHERE c.FCLT_ID IN 
							<foreach item="item" index="index" collection="selectRowId" open="(" close=")" separator=",">
								#{item}
							</foreach> 
					) m
					, CCTV_PRESET d
				WHERE m."baseId" = d.CCTV_ID
		) k
		WHERE k."rk1" = 1 
	</select>
	
	<update id="updateDronePosition" parameterType="map">
		UPDATE FACILITY_S
		SET 
			LATITUDE = #{lat}::DOUBLE PRECISION,
			LONGITUDE = #{lon}::DOUBLE PRECISION
		WHERE 1=1
		AND FCLT_ID = #{fcltId};
	</update>
	
	<insert id="insertCctvViewLog" parameterType="map">
		INSERT INTO CCTV_VIEW_LOG (
			FCLT_ID,
			FCLT_NM,
			USER_ID,
			SESSION_ID,
			TYPE,
			STORAGE_START_TIME,
			STORAGE_END_TIME,
			INSERT_DATE
		) VALUES (
			#{fcltId},
			#{fcltNm},
			#{userId},
			#{sessionId},
			#{type},
			#{storageStartTime},
			#{storageEndTime},
			NOW()
		);
	</insert>
	
	<select id="getCheckFcltId" parameterType="map" resultType="int">
		SELECT
			COUNT(*) AS idKey
		FROM FACILITY_E
		WHERE 1=1
		AND FCLT_ID = #{fcltId}
	</select>

	<insert id="insertFclt" parameterType="map">
		INSERT INTO FACILITY_E
		(
			FCLT_ID,
			FCLT_NM,
			LATITUDE,
			LONGITUDE,
			KINDS,
			PURPOSE,
			FCLT_PLACE,
			INSERT_DATE,
			AREA_CD,
			MGMT_NO
		) VALUES(
			#{fcltId},
			#{fcltNm},
			#{fcltLat}::double PRECISION,
			#{fcltLon}::double PRECISION ,
			#{fcltKind},
			#{fcltPurpose},
			#{fcltPlace},
			NOW(),
			#{areaCd},
			#{fcltMgmtNo}
		)
		ON CONFLICT
		(FCLT_ID)
		DO UPDATE SET
			FCLT_NM = #{fcltNm},
			LATITUDE = #{fcltLat}::double PRECISION,
			LONGITUDE = #{fcltLon}::double PRECISION,
			KINDS = #{fcltKind},
			PURPOSE = #{fcltPurpose},
			FCLT_PLACE = #{fcltPlace},
			UPDATE_DATE = NOW(),
			AREA_CD = #{areaCd},
			MGMT_NO = #{fcltMgmtNo}
	</insert>
	
	<select id="selectFcltEList" parameterType="map" resultType="com.danusys.guardian.common.util.EgovMap">
		SELECT ROW_NUMBER() OVER(ORDER BY a."fcltId" ASC) AS "rnum",
			   a.*
		FROM (
			SELECT 
				a.FCLT_ID AS "fcltId",
				a.FCLT_NM AS "fcltNm",
				a.LATITUDE::text AS "lat",
				a.LONGITUDE::text AS "lon",
				a.KINDS AS "kinds",
				a.FCLT_PLACE AS "fcltPlace",
				a.PURPOSE AS "purpose",
				a.STATE AS "state",
				CASE a.STATE 
					WHEN '0' THEN 'ON'
					WHEN '1' THEN 'OFF' 
				END AS "stateCase",
				a.INSERT_DATE AS "insertDate",
				a.UPDATE_DATE AS "updateDate",
				b.GRP_CD_NM AS "kindsNm",
				c.DE_CD_NM AS "purposeNm",
				a.MGMT_NO AS "mgmtNo",
				a.AREA_CD AS "areaCd",
				c.ICON_URL AS "iconUrl"
			FROM FACILITY_E a
			LEFT OUTER JOIN GROUP_CD b
            ON b.GRP_CD = a.KINDS
            LEFT OUTER JOIN DETAIL_CD c
            ON c.DE_CD = a.KINDS
			WHERE 1=1
			<if test="state != null and state != ''">
			AND a.STATE = #{state}
			</if>
			<if test="mapBound != null and mapBound != ''">
			AND ST_WITHIN(ST_GEOMFROMTEXT('POINT('||a.LONGITUDE||' '||a.LATITUDE||')'),ST_GEOMFROMTEXT('POLYGON(('||#{mapBound}||'))')) = true
			</if>
			<choose>
	            <when test="fcltSpace != null">
					<foreach collection="fcltSpace" item="item" index="index" separator="," open="AND a.AREA_CD IN (" close=")">
					#{item}
					</foreach>
				</when>
	        </choose>
	        <choose>
	            <when test="fcltKnd != null">
					<foreach collection="fcltKnd" item="item" index="index" separator="," open="AND a.KINDS IN (" close=")">
					#{item}
					</foreach>
				</when>
	        </choose>
	        ) a
	</select>
	
	<delete id="deleteFclt" parameterType="map">
		DELETE FROM FACILITY_E
		WHERE 
			1=1
		AND 
			FCLT_ID = #{fcltId}
	</delete>
	
	<select id="selectFcltNodeList" parameterType="map" resultType="com.danusys.guardian.common.util.EgovMap">
		SELECT SEQ_NO AS "no", lineString AS "lineString"  
		FROM 
			FACILITY_NODE
		WHERE 
			1=1
			<if test="layerTitle != null and layerTitle != ''">
				AND LAYERTITLE = #{layerTitle}
			</if>
			<if test="seqNo != null and seqNo != ''">
				AND SEQ_NO = #{seqNo}
			</if>
	</select>
	
	<insert id="savefcltCnctLine" parameterType="map">
		INSERT INTO FACILITY_NODE (
			SEQ_NO,
			LINESTRING,
			LAYERTITLE
		) VALUES (
			(SELECT CASE WHEN #{seqNo}::integer IS NULL
			THEN NEXTVAL('FACILITY_NODE_SEQ')
			ELSE #{seqNo}::integer END::integer),
			<!-- NEXTVAL('FACILITY_NODE_SEQ')::integer, -->
			#{lineString}::text,
			#{layerTitle}::text
		) ON CONFLICT
		(SEQ_NO)
		DO UPDATE SET
			LINESTRING = #{lineString}::text
	</insert>
	
	<insert id="insertLayerCode" parameterType="map">
		INSERT INTO LAYER_CODE (
			LAYER_NAME,
			LAYER_COLOR
		) VALUES(
			#{layerName},
			#{layerColor}
		) ON CONFLICT
		(LAYER_NAME)
		DO UPDATE SET
			LAYER_COLOR = #{layerColor}
	</insert>
	
	<select id="chkLayerNm" parameterType="map" resultType="String">
		SELECT 
			COUNT(*) 
		FROM 
			LAYER_CODE 
		WHERE 
			1=1
		AND
			LAYER_NAME = #{layerName}
	</select>
	
	<select id="getLayerCode" parameterType="map" resultType="HashMap">
		SELECT 
			LAYER_NAME AS "layerName", 
			LAYER_COLOR AS "layerColor" 
		FROM 
			LAYER_CODE 
		WHERE 1=1
		<if test="title != null and title != ''">
			AND LAYER_NAME = #{title}
		</if>
	</select>
	
	<delete id="deleteLayerCode" parameterType="map">
		DELETE FROM 
			LAYER_CODE
		WHERE 
			LAYER_NAME = #{layerTitle}
	</delete>
	
	<delete id="deleteFacilityNode" parameterType="map">
		DELETE FROM
			FACILITY_NODE
		WHERE 
			LAYERTITLE = #{layerTitle}
	</delete>
	
	<delete id="deleteLine" parameterType="map">
		DELETE FROM
			FACILITY_NODE
		WHERE 
			1=1
		AND SEQ_NO = #{seqNo}
	</delete>
	
	
	<delete id="deleteTtlFclt" parameterType="map">
		DELETE FROM
			PC_TTL_FCLT
		WHERE 1=1		
	</delete>
	
	<update id="ttlFcltLink" parameterType="map">
		INSERT INTO PC_TTL_FCLT (
			ttl_id
			, ttl_nm
		)
		VALUES
		<foreach item="item" collection="itemList" separator=",">
		(
			#{item.fcltId}
			, #{item.fcltNm}
		)
		</foreach>
		;
    </update>
    
    <update id="insertTtlLog" parameterType="map">
		INSERT INTO PC_TTL_LOG (
			ttl_id
			, ttl_nm
			, insert_date
		)
		VALUES
		<foreach item="item" collection="itemList" separator=",">
		(
			#{item.ttlId}
			, #{item.ttlNm}
			, NOW()
		)
		</foreach>
		;
    </update>
	
</mapper>