<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="event">
	
	<!-- 
		##################
		이벤트
		##################
	-->
	
	<!-- 이벤트 : 조건절 -->
	<sql id="WHERE_EVENT_LIST">
		<if test='keyword != null and keyword != ""'>
			AND T1.ACCOUNT_NO LIKE CONCAT('%', #{keyword}, '%')
		</if>
		AND METER_DTM > DATE_FORMAT(#{startDt}, '%Y-%m-%d %H:%i:%S')
		AND METER_DTM <![CDATA[<]]> DATE_FORMAT(#{endDt}, '%Y-%m-%d %H:%i:%S')
	</sql>
	
	<!-- 이벤트 : 목록 조회 카운트-->
	<select id="SELECT_LIST_EVENT_CNT" parameterType="hashMap" resultType="int">
		SELECT COUNT(*)
		FROM T_EVENT_LOG T1
		INNER JOIN T_ACCOUNT T4 ON T1.ACCOUNT_NO = T4.ACCOUNT_NO 
		WHERE 1=1
		<include refid="WHERE_EVENT_LIST"/>
	</select>
	
	<!-- 이벤트 : 목록 조회 -->
	<select id="SELECT_LIST_EVENT" parameterType="hashMap" resultType="uisRsMap">
		-- 이벤트 목록 조회 : SELECT_LIST_EVENT
		
		SELECT T1.EVENT_LOG_SEQ
			, T2.EVENT_NAME
			, DATE_FORMAT(T1.METER_DTM, '%Y-%m-%d %H:%i:%s') AS METER_DTM
			, T1.ACCOUNT_NO
			, T1.EVENT_NO
			, DATE_FORMAT(T1.EVENT_START_DT, '%Y-%m-%d %H:%i:%s') AS EVENT_START_DT
			, CASE WHEN T1.EVENT_END_DT IS NULL THEN '-' ELSE DATE_FORMAT(T1.EVENT_END_DT, '%Y-%m-%d %H:%i:%s') END AS EVENT_END_DT
            , T3.CODE_NAME AS STEP
            , T4.ACCOUNT_NM
		FROM T_EVENT_LOG T1
		INNER JOIN T_EVENT_CODE T2 ON T1.EVENT_CODE = T2.EVENT_CODE 
		INNER JOIN T_CODE T3 ON T1.STEP = T3.CODE_VALUE
        INNER JOIN T_ACCOUNT T4 ON T1.ACCOUNT_NO = T4.ACCOUNT_NO 
		AND T3.CODE_GROUP = 'EVENT_LOG(STEP)'
		WHERE 1=1
		<include refid="WHERE_EVENT_LIST"/>
		ORDER BY T1.EVENT_START_DT DESC
		<if test="start != null and length != null">
 			LIMIT ${start} , ${length}
 		</if>
	</select>
	
	<!-- 이벤트: 종료  -->
	<update id="UPDATE_EVENT_STEP" parameterType="hashMap">
		-- 이벤트 종료  : UPDATE_EVENT_STEP 
		UPDATE T_EVENT_LOG SET STEP = 1
		, EVENT_END_DT = NOW()
		WHERE EVENT_LOG_SEQ = #{eventLogSeq}
	</update>
		
	
	<!-- 이벤트 : 엑셀다운로드 -->
	<select id="SELECT_LIST_EVENT_EXCEL" parameterType="hashMap" resultType="uisRsMap">
		-- 사용자 엑셀 다운로드 : SELECT_LIST_EVENT_EXCEL

		SELECT T1.EVENT_LOG_SEQ
			, T1.EVENT_NO
			, T2.EVENT_NAME
			, DATE_FORMAT(T1.METER_DTM, '%Y-%m-%d %H:%i:%s') AS METER_DTM
			, DATE_FORMAT(T1.EVENT_START_DT, '%Y-%m-%d %H:%i:%s') AS EVENT_START_DT
			, CASE WHEN T1.EVENT_END_DT IS NULL THEN '-' ELSE DATE_FORMAT(T1.EVENT_END_DT, '%Y-%m-%d %H:%i:%s') END AS EVENT_END_DT
            , T3.CODE_NAME AS STEP
			, T1.ACCOUNT_NO
            , T4.ACCOUNT_NM
		FROM T_EVENT_LOG T1
		INNER JOIN T_EVENT_CODE T2 ON T1.EVENT_CODE = T2.EVENT_CODE 
		INNER JOIN T_CODE T3 ON T1.STEP = T3.CODE_VALUE
        INNER JOIN T_ACCOUNT T4 ON T1.ACCOUNT_NO = T4.ACCOUNT_NO 
		AND T3.CODE_GROUP = 'EVENT_LOG(STEP)'
	</select>
	
	<!-- 이벤트 : 관제페이지 이벤트 조회 -->
	<select id="SELECT_LIST_EVENT_GIS" parameterType="hashMap" resultType="uisRsMap">
		-- 관제 이벤트 목록 조회 : SELECT_LIST_EVENT_GIS				
		WITH MAIN AS(		
				SELECT
					DISTINCT (EL.EVENT_LOG_SEQ),
					EL.EVENT_NO,
					EL.ACCOUNT_NO,
					EL.EVENT_START_DT,
					CASE WHEN EL.EVENT_END_DT IS NULL THEN '-' ELSE EL.EVENT_END_DT END AS EVENT_END_DT,
					EC.EVENT_CODE,
					EC.EVENT_NAME,
					A.GPS_LATITUDE AS LATITUDE,
					A.GPS_LONGITUDE AS LONGITUDE,
					A.ACCOUNT_NM AS ACCOUNT_NM,
					EGC.EVENT_GROUP_CODE,
					EGC.EVENT_GROUP_NAME,
					DATEDIFF(NOW(),EL.EVENT_START_DT) AS DAY_GAP,
					EL.STEP,
					CASE WHEN EL.STEP = 1 THEN '처리' ELSE '미처리' END AS STEP_NM,
					A.FULL_ADDR
				FROM T_EVENT_LOG EL
				INNER JOIN T_ACCOUNT_DATA AD
				ON EL.ACCOUNT_NO = AD.ACCOUNT_NO 
				INNER JOIN T_ACCOUNT A 
				ON AD.ACCOUNT_NO = A.ACCOUNT_NO 
				INNER JOIN T_EVENT_CODE EC
				ON EC.EVENT_CODE = EL.EVENT_CODE
				INNER JOIN T_EVENT_GROUP_CODE EGC 
				ON EC.EVENT_GROUP_CODE = EGC.EVENT_GROUP_CODE
		)		
		SELECT * FROM MAIN
		WHERE 1=1
		<if test='eventStartDt != null and eventStartDt != ""'>
	 		AND STR_TO_DATE(DATE_FORMAT(#{eventStartDt}, '%Y-%M-%D %H:%I:%S'), '%Y-%M-%D %H:%I:%S') <![CDATA[<=]]> EVENT_START_DT 
		</if>
	 	<if test='eventEndDt != null and eventEndDt != ""'> 
			AND EVENT_START_DT <![CDATA[<]]> DATE_ADD(STR_TO_DATE(DATE_FORMAT(#{eventEndDt}, '%Y-%M-%D %H:%I:%S'), '%Y-%M-%D %H:%I:%S'), INTERVAL 1 DAY)
		</if>
		<if test='eventCode != null and eventCode != ""'> 
			AND EVENT_CODE IN (${eventCode})
		</if>
		<if test='searchText != null and searchText != ""'>
			AND ${searchType} LIKE CONCAT( '%',#{searchText},'%')
		</if>
		<if test='step'>
			AND STEP = #{step}
		</if>
		<if test='eventSeqAry'>
			AND EVENT_LOG_SEQ IN (
			<foreach collection="eventSeqAry" item="item" index="index" separator=",">
				#{item}
			</foreach>
			) 
		</if>
		<choose>
			<when test='orderType'>
				ORDER BY ${orderType} DESC
			</when>
			<otherwise>
				ORDER BY DAY_GAP, EVENT_START_DT DESC, EVENT_LOG_SEQ
			</otherwise>
		</choose>
		
	</select>
	
	<!-- 이벤트 : geojson 조회 -->
	<select id="SELECT_LIST_EVENT_FOR_LAYER" parameterType="hashMap" resultType="uisRsMap">
		-- 이벤트 geojson 조회 : SELECT_LIST_EVENT_FOR_LAYER

		SELECT 
			EL.ACCOUNT_NO,
			GROUP_CONCAT(EL.EVENT_NO) as EVENT_NM_LIST,
			GROUP_CONCAT(EL.EVENT_LOG_SEQ) as EVENT_SEQ_LIST,
			COUNT(EL.ACCOUNT_NO) as GROUP_CNT,
			A.GPS_LATITUDE AS LATITUDE,
			A.GPS_LONGITUDE AS LONGITUDE
		FROM T_EVENT_LOG EL
		INNER JOIN T_ACCOUNT A
		ON EL.ACCOUNT_NO = A.ACCOUNT_NO 
		GROUP BY ACCOUNT_NO
		ORDER BY EL.EVENT_START_DT DESC, EL.EVENT_LOG_SEQ 
	</select>
	
	<select id="SELECT_LIST_LASTEST_EVENT_BY_ACCOUNT" parameterType="hashMap" resultType="uisRsMap">
		-- 수용가별 최근 이벤트 여부 조회
		WITH MAIN AS (
			SELECT  
				ACCOUNT_NO, ACCOUNT_NM, CONNECT_DTM , DEVICE_SN , METER_SN , CALIBER_CD ,
				FN_STATE_CODE_TO_STR('MT_DOWN',MT_DOWN) AS MT_DOWN,
				MT_DOWN_DTM , MT_LAST_DTM , FULL_ADDR , INSERT_DT , UPDATE_DT ,
				FN_STATE_CODE_TO_STR('STATE_DISPLAY',STATE_DISPLAY) AS STATE_DISPLAY , 
				FN_STATE_CODE_TO_STR('STATUS_DEVICE',STATUS_DEVICE) AS STATUS_DEVICE , 
				GPS_LONGITUDE , GPS_LATITUDE, COMPANY_NM, COMPANY_CD
			FROM 
			T_ACCOUNT
			WHERE ACCOUNT_NO IN (
			<foreach collection="nodeGroup" item="item" index="index" separator=",">
				#{item}
			</foreach>
			)
		)	
		
		SELECT * FROM MAIN M
		LEFT OUTER JOIN (
			SELECT 
				T1.*,
				T2.EVENT_NAME, 
				T4.EVENT_GROUP_CODE,
				T4.EVENT_GROUP_NAME 
			FROM (
				SELECT 
					* 
					,ROW_NUMBER() OVER(PARTITION BY ACCOUNT_NO ORDER BY EVENT_START_DT DESC, EVENT_NO) AS RANKING
				FROM 
				T_EVENT_LOG
				WHERE ACCOUNT_NO IN (
				<foreach collection="nodeGroup" item="item" index="index" separator=",">
					#{item}
				</foreach>
				)
			) T1
			INNER JOIN T_EVENT_CODE T2
			ON T1.EVENT_CODE = T2.EVENT_CODE
			INNER JOIN T_EVENT_GROUP_CODE T4
			ON T2.EVENT_GROUP_CODE = T4.EVENT_GROUP_CODE  
			WHERE T1.RANKING = 1
		) T3
		ON M.ACCOUNT_NO = T3.ACCOUNT_NO
	</select>
	
	<!-- 이벤트 : 수용가 이벤트 이상 조회 -->
	<select id="SELECT_LIST_ACCOUNT_DATA_EVENT" parameterType="hashMap" resultType="uisRsMap">
		-- 이벤트 이상 조회  : SELECT_LIST_ACCOUNT_DATA_EVENT
		
		WITH T_MAIN AS (
			SELECT ACCOUNT_NO, METER_DTM
				, LEAK_STATE
				, M_LOW_BATT
				, M_LEAK
				, M_OVERLOAD
				, M_REVERSE
				, M_NOT_USE
			FROM (
				SELECT ACCOUNT_NO, METER_DTM
					, LEAK_STATE
					, M_LOW_BATT
					, M_LEAK
					, M_OVERLOAD
					, M_REVERSE
					, M_NOT_USE
					, RANK() OVER(PARTITION BY ACCOUNT_NO ORDER BY ACCOUNT_NO, METER_DTM DESC) AS RNK
				FROM T_ACCOUNT_DATA
				WHERE METER_DTM > DATE_SUB(NOW(), INTERVAL 5 HOUR)
			) T1
			WHERE RNK=1
		)
		SELECT *
		FROM (
			SELECT ACCOUNT_NO, METER_DTM, 'LEAK_STATE' AS COL_NAME, LEAK_STATE AS RESULT_VALUE, 51 AS EVENT_CODE
			FROM T_MAIN
			UNION ALL
			SELECT ACCOUNT_NO, METER_DTM, 'M_LOW_BATT' AS COL_NAME, M_LOW_BATT AS COL, 52
			FROM T_MAIN
			UNION ALL
			SELECT ACCOUNT_NO, METER_DTM, 'M_LEAK' AS COL_NAME, M_LEAK AS COL, 53
			FROM T_MAIN
			UNION ALL
			SELECT ACCOUNT_NO, METER_DTM, 'M_OVERLOAD' AS COL_NAME, M_OVERLOAD AS COL, 54
			FROM T_MAIN
			UNION ALL
			SELECT ACCOUNT_NO, METER_DTM, 'M_REVERSE' AS COL_NAME, M_REVERSE AS COL, 55
			FROM T_MAIN
			UNION ALL
			SELECT ACCOUNT_NO, METER_DTM, 'M_NOT_USE' AS COL_NAME, M_NOT_USE AS COL, 56
			FROM T_MAIN
		) T1 
		WHERE RESULT_VALUE=1
	</select>
	
		
	<!-- 이벤트 : 한 수용가의 이벤트 로그 조회 -->
	<select id="SELECT_LIST_EVENT_LOG" parameterType="hashMap" resultType="uisRsMap">
		-- 한 수용가의 이벤트 로그 조회
		SELECT 
			EL.EVENT_START_DT,
			EL.EVENT_END_DT,
			EL.EVENT_LOG_SEQ, 
			EL.EVENT_NO, 
			EC.EVENT_CODE,
			EC.EVENT_NAME, 
			EC.EVENT_GROUP_CODE, 
			EGC.EVENT_GROUP_NAME 
		FROM T_EVENT_LOG EL
		INNER JOIN T_EVENT_CODE EC
		ON EL.EVENT_CODE = EC.EVENT_CODE
		INNER JOIN T_EVENT_GROUP_CODE EGC 
		ON EC.EVENT_GROUP_CODE = EGC.EVENT_GROUP_CODE
		WHERE ACCOUNT_NO = #{accountNo}
		ORDER BY EVENT_START_DT DESC, EVENT_NO 
	</select>
	
	<!-- 이벤트 : 한 수용가의 이벤트 사용량 통계-->
	<select id="SELECT_LIST_EVENT_DATA_STATS" parameterType="hashMap" resultType="uisRsMap">
		-- 한 수용가의 이벤트 사용량 통계
		SELECT 
			COUNT(EL.EVENT_LOG_SEQ) AS CNT,
			COALESCE(EGC.EVENT_GROUP_CODE, 0) AS EVENT_GROUP_CODE, 
			EGC.EVENT_GROUP_NAME
		FROM T_EVENT_LOG EL
		INNER JOIN T_EVENT_CODE EC
		ON EL.EVENT_CODE = EC.EVENT_CODE
		INNER JOIN T_EVENT_GROUP_CODE EGC 
		ON EC.EVENT_GROUP_CODE = EGC.EVENT_GROUP_CODE
		WHERE ACCOUNT_NO = #{accountNo}
		GROUP BY EGC.EVENT_GROUP_CODE
		WITH ROLLUP 
	</select>
	
	<!-- 이벤트 : 등록 -->
	<insert id="INSERT_EVENT_LOG" parameterType="hashMap">
		-- 이벤트 등록 : INSERT_EVENT_LOG
		
		INSERT INTO T_EVENT_LOG (
			EVENT_NO
			, ACCOUNT_NO
			, METER_DTM
			, EVENT_CODE
			, EVENT_START_DT
			, STEP
			, TEMP_LATITUDE
			, TEMP_LONGITUDE
		) VALUES (
			#{eventNo}
			, #{accountNo}
			, STR_TO_DATE(DATE_FORMAT(#{meterDtm}, '%Y-%m-%d %H:%i:%s'), '%Y-%m-%d %H:%i:%s')
			, #{eventCode}
			, NOW()
			, 0
			, (SELECT LATITUDE FROM V_RANDOM_GPS)
			, (SELECT LONGITUDE FROM V_RANDOM_GPS)
		) ON DUPLICATE KEY
		UPDATE 
			EVENT_CODE=#{eventCode}
	</insert>
	
	<!-- 이벤트 : 처리 수정 -->
	<insert id="UPDATE_EVENT_LOG" parameterType="hashMap">
		-- 이벤트 처리 수정 : UPDATE_EVENT_LOG
		
		UPDATE T_EVENT_LOG
		SET EVENT_END_DT = NOW(), STEP = 1
		WHERE EVENT_LOG_SEQ=#{eventLogSeq}
	</insert>
	
	<!-- 이벤트 : 전체 이벤트 발생 (도넛 차트) -->
	<select id="SELECT_LIST_EVENT_FOR_TOTAL_PER_CHART" parameterType="hashMap" resultType="uisRsMap">
		-- 이벤트 : 전체 이벤트 발생 (도넛 차트) : SELECT_LIST_EVENT_FOR_TOTAL_PER_CHART
	
		WITH T_MAIN AS (
			SELECT CASE WHEN EVENT_CODE IS NULL THEN 99 ELSE EVENT_CODE END EVENT_CODE
				, COUNT(EVENT_CODE) AS EVENT_CNT
			FROM T_EVENT_LOG
			WHERE 1=1
			<if test='eventStartDt!=null and eventStartDt!=""'>
				AND METER_DTM BETWEEN STR_TO_DATE(CONCAT(#{eventStartDt}, ' 00:00:00'), '%Y-%m-%d %H:%i:%s') AND STR_TO_DATE(CONCAT(#{eventEndDt}, ' 23:59:59'), '%Y-%m-%d %H:%i:%s')
			</if>
			GROUP BY EVENT_CODE WITH ROLLUP	
		)
		, T_TOTAL AS (
			SELECT EVENT_CNT AS TOTAL_EVENT_CNT
			FROM T_MAIN
			WHERE EVENT_CODE=99
		)
		, T_DATA AS (
			SELECT EVENT_CODE, EVENT_CNT
			FROM T_MAIN
			WHERE EVENT_CODE!=99
		)
		SELECT S1.EVENT_CODE, ROUND(S1.EVENT_CNT/S2.TOTAL_EVENT_CNT*100, 1) AS PER_EVENT, S3.EVENT_NAME, S1.EVENT_CNT
		FROM T_DATA S1 
			INNER JOIN T_TOTAL S2 ON 1=1
			INNER JOIN T_EVENT_CODE S3 ON S1.EVENT_CODE=S3.EVENT_CODE
	</select>	
	
	<!-- 이벤트 : 유형 별 발생 건수 (메인) -->
	<select id="SELECT_DETAIL_EVENT_TOTAL_CNT" parameterType="hashMap" resultType="uisRsMap">
		-- 이벤트 : 유형 별 발생 건수 (메인) : SELECT_DETAIL_EVENT_TOTAL_CNT
		
		WITH T_MAIN AS (
			SELECT 'leakState' AS EVENT_CODE, FORMAT(COUNT(LEAK_STATE), 0) AS CNT
			FROM t_account_data
			WHERE LEAK_STATE = 1
			UNION ALL
			SELECT 'mLowBatt', FORMAT(COUNT(M_LOW_BATT), 0)
			FROM T_ACCOUNT_DATA
			WHERE M_LOW_BATT = 1
			UNION ALL
			SELECT 'mLeak', FORMAT(COUNT(M_LEAK), 0)
			FROM T_ACCOUNT_DATA
			WHERE M_LEAK = 1
			UNION ALL
			SELECT 'mOverload', FORMAT(COUNT(M_OVERLOAD), 0)
			FROM T_ACCOUNT_DATA
			WHERE M_OVERLOAD = 1
			UNION ALL
			SELECT 'mReverse', FORMAT(COUNT(M_REVERSE), 0)
			FROM T_ACCOUNT_DATA
			WHERE M_REVERSE = 1
			UNION ALL
			SELECT 'mNotUse', FORMAT(COUNT(M_NOT_USE), 0)
			FROM T_ACCOUNT_DATA
			WHERE M_NOT_USE = 1
		)
		SELECT MAX(LEAK_STATE_CNT) AS LEAK_STATE_CNT
			, MAX(M_LOW_BATT_CNT) AS M_LOW_BATT_CNT
			, MAX(M_LEAK_CNT) AS M_LEAK_CNT
			, MAX(M_OVERLOAD_CNT) AS M_OVERLOAD_CNT
			, MAX(M_REVERSE_CNT) AS M_REVERSE_CNT
			, MAX(M_NOT_USE_CNT) AS M_NOT_USE_CNT
		FROM (
			SELECT IF(EVENT_CODE='leakState', CNT, NULL) AS LEAK_STATE_CNT
				, IF(EVENT_CODE='mLowBatt', CNT, NULL) AS M_LOW_BATT_CNT
				, IF(EVENT_CODE='mLeak', CNT, NULL) AS M_LEAK_CNT
				, IF(EVENT_CODE='mOverload', CNT, NULL) AS M_OVERLOAD_CNT
				, IF(EVENT_CODE='mReverse', CNT, NULL) AS M_REVERSE_CNT
				, IF(EVENT_CODE='mNotUse', CNT, NULL) AS M_NOT_USE_CNT
			FROM T_MAIN
		) R
	</select>
	
	<!-- 이벤트 : 처리 현황 (도넛 차트) -->
	<select id="SELECT_LIST_EVENT_FOR_PROCESS_PER_CHART" parameterType="hashMap" resultType="uisRsMap">
		-- 이벤트 : 처리 현황 (도넛 차트) : SELECT_LIST_EVENT_FOR_PROCESS_PER_CHART
	
		WITH T_MAIN AS (
			SELECT IF(STEP IS NULL, 99, STEP) AS STEP, COUNT(*) AS CNT_STEP
			FROM T_EVENT_LOG
			WHERE EVENT_START_DT BETWEEN STR_TO_DATE(CONCAT(#{eventStartDt}, ' 00:00:00'), '%Y-%m-%d %H:%i:%s') AND STR_TO_DATE(CONCAT(#{eventEndDt}, ' 23:59:59'), '%Y-%m-%d %H:%i:%s')
			GROUP BY STEP WITH ROLLUP
		)
		, T_MAIN_TOTAL AS (
			SELECT CNT_STEP
			FROM T_MAIN
			WHERE STEP=99	
		)
		, T_MAIN_STEP AS (
			SELECT STEP, CNT_STEP
			FROM T_MAIN
			WHERE STEP!=99
		)
		SELECT IF(S1.STEP=0, '미처리', '처리완료') AS STEP_NM, ROUND((S1.CNT_STEP/S2.CNT_STEP)*100, 1) AS PER_STEP
		FROM T_MAIN_STEP S1
			INNER JOIN T_MAIN_TOTAL S2 ON 1=1
	</select>

	<!-- 이벤트 : 통계 (라인 차트) -->
	<select id="SELECT_LIST_EVENT_FOR_STATS_CHART" parameterType="hashMap" resultType="uisRsMap">	
		-- 이벤트 : 통계 (라인 차트) : SELECT_LIST_EVENT_FOR_STATS_CHART
	
		SELECT DAY, COUNT(*) AS DAY_CNT
		FROM (
			SELECT EVENT_START_DT, DATE_FORMAT(EVENT_START_DT, '%m/%d') AS DAY
			FROM T_EVENT_LOG
			WHERE EVENT_START_DT BETWEEN STR_TO_DATE(CONCAT(#{eventStartDt}, ' 00:00:00'), '%Y-%m-%d %H:%i:%s') AND STR_TO_DATE(CONCAT(#{eventEndDt}, ' 23:59:59'), '%Y-%m-%d %H:%i:%s')
		) R1
		GROUP BY DAY
		ORDER BY DAY
	</select>
</mapper>